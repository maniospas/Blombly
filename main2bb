#include "libs/final"

adder(x, y) = {
    default bias = 0;
    assert len(args) == 0;
    x |= float;
    y |= float;
    return x + y + bias;
}

print(adder(1, 2 :: bias=1));



A = list();
A = A|back(1);
print(A);


buff = "";
tic = bbvm::time();
while(i in range(100000)) 
    buff = buff+" "+str(i);

toc = bbvm::time();
print(len(buff));
print((toc-tic), "sec");
print(buff[range(20)]);






final Adder = {
    final Adder = Adder;
    defer final getThis=>this; // do this at the end
    defer final element = element|float;
    float => this.element+bbvm::float(this.parent);
    str => this|bbvm::float|bbvm::str;
    call(newElement) => new{
        assert len(args) == 0;
        Adder:
        parent=getThis();
        element=newElement;
    }
}

adder(x) => new{
    Adder: 
    element=x; 
    parent=0;
}

add = {
    ret = adder(0);
    while(x as args|next) 
        ret = ret(x|float);
    return ret;
}



print(add(1,2,3,4));



add(x) => new{final x}.call(y) => x+y;
print(add(1)(2));