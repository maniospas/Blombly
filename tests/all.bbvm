BEGIN _bb26
BEGIN _bb29
BUILTIN lightred "\e[0;91m"
final # lightred
BUILTIN lightgreen "\e[0;92m"
final # lightgreen
BUILTIN reset "\e[0m"
final # reset
return # this
END
new ansi _bb29
final # ansi
BEGIN _bb49
BEGIN _bb50
next element args
BEGIN _bb53
get _bb54 this element
IS .element _bb54
BEGIN _bb55
next A args
get _bb56 this .element
IS ..element _bb56
push # A ..element
return # A
END
IS call _bb55
return # this
END
new _bb51 _bb53
return # _bb51
END
IS toback _bb50
final # toback
return # this
END
new collection _bb49
final # collection
BEGIN _bb72
next path args
str path path
BEGIN _bb75
sqlite connector path
return # this
END
new _bb73 _bb75
return # _bb73
END
IS db _bb72
final # db
BEGIN _bb186
BEGIN _bb187
next text args
str text text
BUILTIN _bb189 ""
str _bb191 text
BUILTIN _bb193 "  ] "
get _bb196 bb ansi
get _bb195 _bb196 reset
str _bb197 _bb195
BUILTIN _bb199 "ok"
get _bb202 bb ansi
get _bb201 _bb202 lightgreen
str _bb203 _bb201
BUILTIN _bb204 "[  "
add _bb200 _bb204 _bb203
add _bb198 _bb200 _bb199
add _bb194 _bb198 _bb197
add _bb192 _bb194 _bb193
add _bb190 _bb192 _bb191
add _bb188 _bb190 _bb189
print # _bb188
END
IS ok _bb187
final # ok
BEGIN _bb205
next text args
str text text
BUILTIN _bb207 ""
str _bb209 text
BUILTIN _bb211 " ] "
get _bb214 bb ansi
get _bb213 _bb214 reset
str _bb215 _bb213
BUILTIN _bb217 "fail"
get _bb220 bb ansi
get _bb219 _bb220 lightred
str _bb221 _bb219
BUILTIN _bb222 "[ "
add _bb218 _bb222 _bb221
add _bb216 _bb218 _bb217
add _bb212 _bb216 _bb215
add _bb210 _bb212 _bb211
add _bb208 _bb210 _bb209
add _bb206 _bb208 _bb207
print # _bb206
END
IS fail _bb205
final # fail
return # this
END
new logger _bb186
final # logger
BEGIN _bb346
BEGIN _bb347
next value args
str value value
return # value
END
IS call _bb347
BEGIN _bb410
next query args
str query query
BEGIN _bb413
get _bb414 this query
IS .query _bb414
BEGIN _bb415
BUILTIN _bb416 "Assertion failed"
fail # _bb416
END
BUILTIN _bb418 Bfalse
BUILTIN _bb420 I0
len _bb421 args
eq _bb419 _bb421 _bb420
eq _bb417 _bb419 _bb418
if # _bb417 _bb415
BEGIN _bb422
next search args
str search search
get _bb423 this .query
IS ..query _bb423
BEGIN _bb424
BUILTIN _bb425 "Assertion failed"
fail # _bb425
END
BUILTIN _bb427 Bfalse
BUILTIN _bb429 I0
len _bb430 args
eq _bb428 _bb430 _bb429
eq _bb426 _bb428 _bb427
if # _bb426 _bb424
IS query ..query
len nsearch search
len nquery query
BEGIN _bb433
BUILTIN _bb434 Bfalse
return # _bb434
END
lt _bb435 nsearch nquery
if # _bb435 _bb433
range _bb436 nquery
iter _bbmacro4 _bb436
BEGIN _bb438
next _bb439 _bbmacro4
AS i _bb439
exists _bb440 i
END
BEGIN _bb441
BEGIN _bb442
BUILTIN _bb443 Bfalse
return # _bb443
END
at _bb445 search i
at _bb446 query i
neq _bb444 _bb446 _bb445
if # _bb444 _bb442
END
while # _bb438 _bb441
BUILTIN _bb447 Btrue
return # _bb447
END
IS call _bb422
return # this
END
new _bb411 _bb413
return # _bb411
END
IS starts _bb410
final # starts
BEGIN _bb448
next query args
str query query
BEGIN _bb451
get _bb452 this query
IS .query _bb452
BEGIN _bb453
BUILTIN _bb454 "Assertion failed"
fail # _bb454
END
BUILTIN _bb456 Bfalse
BUILTIN _bb458 I0
len _bb459 args
eq _bb457 _bb459 _bb458
eq _bb455 _bb457 _bb456
if # _bb455 _bb453
BEGIN _bb460
next search args
str search search
get _bb461 this .query
IS ..query _bb461
BEGIN _bb462
BUILTIN _bb463 "Assertion failed"
fail # _bb463
END
BUILTIN _bb465 Bfalse
BUILTIN _bb467 I0
len _bb468 args
eq _bb466 _bb468 _bb467
eq _bb464 _bb466 _bb465
if # _bb464 _bb462
IS query ..query
len nsearch search
len nquery query
BEGIN _bb471
BUILTIN _bb472 Bfalse
return # _bb472
END
lt _bb473 nsearch nquery
if # _bb473 _bb471
range _bb474 nquery
iter _bbmacro5 _bb474
BEGIN _bb476
next _bb477 _bbmacro5
AS i _bb477
exists _bb478 i
END
BEGIN _bb479
BEGIN _bb480
BUILTIN _bb481 Bfalse
return # _bb481
END
sub _bb485 nsearch nquery
add _bb484 _bb485 i
at _bb483 search _bb484
at _bb486 query i
neq _bb482 _bb486 _bb483
if # _bb482 _bb480
END
while # _bb476 _bb479
BUILTIN _bb487 Btrue
return # _bb487
END
IS call _bb460
return # this
END
new _bb449 _bb451
return # _bb449
END
IS ends _bb448
final # ends
BEGIN _bb488
next query args
str query query
BEGIN _bb491
get _bb492 this query
IS .query _bb492
BEGIN _bb493
BUILTIN _bb494 "Assertion failed"
fail # _bb494
END
BUILTIN _bb496 Bfalse
BUILTIN _bb498 I0
len _bb499 args
eq _bb497 _bb499 _bb498
eq _bb495 _bb497 _bb496
if # _bb495 _bb493
BEGIN _bb500
BUILTIN pos I0
END
BEGIN _bb504
IS pos pos
return # #
END
try _bb502 _bb504
catch # _bb502 _bb500
BEGIN _bb505
next search args
str search search
get _bb506 this .query
IS ..query _bb506
BEGIN _bb507
BUILTIN _bb508 "Assertion failed"
fail # _bb508
END
BUILTIN _bb510 Bfalse
BUILTIN _bb512 I0
len _bb513 args
eq _bb511 _bb513 _bb512
eq _bb509 _bb511 _bb510
if # _bb509 _bb507
IS query ..query
get _bb514 this pos
IS pos _bb514
len nsearch search
len nquery query
BUILTIN _bb519 I1
sub _bb520 nsearch nquery
add _bb518 _bb520 _bb519
range _bb517 pos _bb518
iter _bbmacro6 _bb517
BEGIN _bb522
next _bb523 _bbmacro6
AS i _bb523
exists _bb524 i
END
BEGIN _bb525
range _bb526 nquery
iter _bbmacro7 _bb526
BEGIN _bb530
BEGIN _bb531
next _bb532 _bbmacro7
AS j _bb532
exists _bb533 j
END
BEGIN _bb534
BEGIN _bb535
BUILTIN _bb536 Btrue
return # _bb536
END
add _bb539 i j
at _bb538 search _bb539
at _bb540 query j
neq _bb537 _bb540 _bb538
if # _bb537 _bb535
END
while # _bb531 _bb534
END
try different _bb530
BEGIN _bb541
return # i
END
catch # different _bb541
END
while # _bb522 _bb525
return # nsearch
END
IS call _bb505
return # this
END
new _bb489 _bb491
return # _bb489
END
IS index _bb488
final # index
BEGIN _bb542
next query args
str query query
BEGIN _bb545
get _bb546 this query
IS .query _bb546
BEGIN _bb547
BUILTIN _bb548 "Assertion failed"
fail # _bb548
END
BUILTIN _bb550 Bfalse
BUILTIN _bb552 I0
len _bb553 args
eq _bb551 _bb553 _bb552
eq _bb549 _bb551 _bb550
if # _bb549 _bb547
BEGIN _bb555
END
default # _bb555
BEGIN _bb557
next search args
str search search
get _bb558 this .query
IS ..query _bb558
IS query ..query
len nsearch search
len nquery query
BEGIN _bb561
BUILTIN _bb562 "Cannot split on a zero-length string"
fail # _bb562
END
BUILTIN _bb564 I0
eq _bb563 nquery _bb564
if # _bb563 _bb561
list ret
BUILTIN pos I0
BEGIN _bb567
lt _bb568 pos nsearch
END
BEGIN _bb569
IS prev_pos pos
BEGIN _bb571
list args search
END
BEGIN _bb574
list args query
IS pos pos
END
get _bb576 bb string
get _bb575 _bb576 index
call _bb573 _bb574 _bb575
call _bb570 _bb571 _bb573
IS pos _bb570
range _bb578 prev_pos pos
at _bb577 search _bb578
IS s _bb577
push # ret s
add pos pos nquery
END
while # _bb567 _bb569
return # ret
END
IS call _bb557
return # this
END
new _bb543 _bb545
return # _bb543
END
IS split _bb542
final # split
return # this
END
new string _bb346
final # string
return # this
END
new bb _bb26
final # bb
BEGIN _bb581
BUILTIN A "0"
BUILTIN _bb583 "1"
add A A _bb583
BUILTIN _bb584 "2"
add A A _bb584
BUILTIN _bb585 "3"
add A A _bb585
BUILTIN _bb586 "4"
add A A _bb586
BUILTIN _bb587 "5"
add A A _bb587
BUILTIN _bb588 "6"
add A A _bb588
BUILTIN _bb589 "7"
add A A _bb589
BUILTIN _bb590 "8"
add A A _bb590
BUILTIN _bb591 "9"
add A A _bb591
BEGIN _bb592
BUILTIN _bb593 "Assertion failed"
fail # _bb593
END
BUILTIN _bb595 Bfalse
BUILTIN _bb597 "0123456789"
eq _bb596 A _bb597
eq _bb594 _bb596 _bb595
if # _bb594 _bb592
BEGIN _bb598
BUILTIN _bb599 "Assertion failed"
fail # _bb599
END
BUILTIN _bb601 Bfalse
BUILTIN _bb603 I10
len _bb604 A
eq _bb602 _bb604 _bb603
eq _bb600 _bb602 _bb601
if # _bb600 _bb598
return # #
END
try _bbmacro8 _bb581
BEGIN _bb605
BEGIN _bb607
str _bb609 _bbmacro8
BUILTIN _bb611 "\n"
BUILTIN _bb612 "String add"
add _bb610 _bb612 _bb611
add _bb608 _bb610 _bb609
list args _bb608
END
get _bb614 bb logger
get _bb613 _bb614 fail
call _bb606 _bb607 _bb613
END
BEGIN _bb615
BEGIN _bb617
BUILTIN _bb618 "String add"
list args _bb618
END
get _bb620 bb logger
get _bb619 _bb620 ok
call _bb616 _bb617 _bb619
END
catch # _bbmacro8 _bb605 _bb615
BEGIN _bb623
BUILTIN _bb624 I1
BUILTIN _bb625 I2
BUILTIN _bb626 I3
BUILTIN _bb627 I4
list A _bb624 _bb625 _bb626 _bb627
BEGIN _bb629
BUILTIN _bb630 "Assertion failed"
fail # _bb630
END
BUILTIN _bb632 Bfalse
BUILTIN _bb634 I2
BUILTIN _bb636 I1
at _bb635 A _bb636
eq _bb633 _bb635 _bb634
eq _bb631 _bb633 _bb632
if # _bb631 _bb629
BEGIN _bb637
BUILTIN _bb638 "Assertion failed"
fail # _bb638
END
BUILTIN _bb640 Bfalse
BUILTIN _bb642 I1
next _bb643 A
eq _bb641 _bb643 _bb642
eq _bb639 _bb641 _bb640
if # _bb639 _bb637
BEGIN _bb644
BUILTIN _bb645 "Assertion failed"
fail # _bb645
END
BUILTIN _bb647 Bfalse
BUILTIN _bb649 I2
next _bb650 A
eq _bb648 _bb650 _bb649
eq _bb646 _bb648 _bb647
if # _bb646 _bb644
BEGIN _bb651
BUILTIN _bb652 "Assertion failed"
fail # _bb652
END
BUILTIN _bb654 Bfalse
BUILTIN _bb656 I4
pop _bb657 A
eq _bb655 _bb657 _bb656
eq _bb653 _bb655 _bb654
if # _bb653 _bb651
BEGIN _bb658
BUILTIN _bb659 "Assertion failed"
fail # _bb659
END
BUILTIN _bb661 Bfalse
BUILTIN _bb663 I3
pop _bb664 A
eq _bb662 _bb664 _bb663
eq _bb660 _bb662 _bb661
if # _bb660 _bb658
BEGIN _bb665
BUILTIN _bb666 "Assertion failed"
fail # _bb666
END
BUILTIN _bb668 Bfalse
BUILTIN _bb670 I0
len _bb671 A
eq _bb669 _bb671 _bb670
eq _bb667 _bb669 _bb668
if # _bb667 _bb665
BUILTIN _bb672 I5
push # A _bb672
BEGIN _bb673
BUILTIN _bb674 "Assertion failed"
fail # _bb674
END
BUILTIN _bb676 Bfalse
BUILTIN _bb678 I5
pop _bb679 A
eq _bb677 _bb679 _bb678
eq _bb675 _bb677 _bb676
if # _bb675 _bb673
return # #
END
try _bbmacro9 _bb623
BEGIN _bb680
BEGIN _bb682
str _bb684 _bbmacro9
BUILTIN _bb686 "\n"
BUILTIN _bb687 "List"
add _bb685 _bb687 _bb686
add _bb683 _bb685 _bb684
list args _bb683
END
get _bb689 bb logger
get _bb688 _bb689 fail
call _bb681 _bb682 _bb688
END
BEGIN _bb690
BEGIN _bb692
BUILTIN _bb693 "List"
list args _bb693
END
get _bb695 bb logger
get _bb694 _bb695 ok
call _bb691 _bb692 _bb694
END
catch # _bbmacro9 _bb680 _bb690
BEGIN _bb698
BUILTIN s I0
BUILTIN _bb701 I10
range _bb700 _bb701
iter _bbmacro11 _bb700
BEGIN _bb703
next _bb704 _bbmacro11
AS i _bb704
exists _bb705 i
END
BEGIN _bb706
add s s i
END
while # _bb703 _bb706
BEGIN _bb707
BUILTIN _bb708 "Assertion failed"
fail # _bb708
END
BUILTIN _bb710 Bfalse
BUILTIN _bb712 I45
eq _bb711 s _bb712
eq _bb709 _bb711 _bb710
if # _bb709 _bb707
return # #
END
try _bbmacro10 _bb698
BEGIN _bb713
BEGIN _bb715
str _bb717 _bbmacro10
BUILTIN _bb719 "\n"
BUILTIN _bb720 "Range"
add _bb718 _bb720 _bb719
add _bb716 _bb718 _bb717
list args _bb716
END
get _bb722 bb logger
get _bb721 _bb722 fail
call _bb714 _bb715 _bb721
END
BEGIN _bb723
BEGIN _bb725
BUILTIN _bb726 "Range"
list args _bb726
END
get _bb728 bb logger
get _bb727 _bb728 ok
call _bb724 _bb725 _bb727
END
catch # _bbmacro10 _bb713 _bb723
BEGIN _bb731
BUILTIN _bb732 I1
BUILTIN _bb733 I2
BUILTIN _bb734 I3
list A _bb732 _bb733 _bb734
BUILTIN s I0
iter _bbmacro13 A
BEGIN _bb738
next _bb739 _bbmacro13
AS x _bb739
exists _bb740 x
END
BEGIN _bb741
add s s x
END
while # _bb738 _bb741
iter it A
BEGIN _bb743
next _bb744 it
AS x _bb744
exists _bb745 x
END
BEGIN _bb746
sub s s x
END
while # _bb743 _bb746
BEGIN _bb747
BUILTIN _bb748 "Assertion failed"
fail # _bb748
END
BUILTIN _bb750 Bfalse
BUILTIN _bb752 I0
eq _bb751 s _bb752
eq _bb749 _bb751 _bb750
if # _bb749 _bb747
return # #
END
try _bbmacro12 _bb731
BEGIN _bb753
BEGIN _bb755
str _bb757 _bbmacro12
BUILTIN _bb759 "\n"
BUILTIN _bb760 "Iteration"
add _bb758 _bb760 _bb759
add _bb756 _bb758 _bb757
list args _bb756
END
get _bb762 bb logger
get _bb761 _bb762 fail
call _bb754 _bb755 _bb761
END
BEGIN _bb763
BEGIN _bb765
BUILTIN _bb766 "Iteration"
list args _bb766
END
get _bb768 bb logger
get _bb767 _bb768 ok
call _bb764 _bb765 _bb767
END
catch # _bbmacro12 _bb753 _bb763
BEGIN _bb771
BEGIN _bb772
get _bb773 this x
IS .x _bb773
BUILTIN x I0
BEGIN _bb775
get _bb776 this x
return # _bb776
END
IS xthis _bb775
BEGIN _bb777
get _bb778 this .x
IS ..x _bb778
return # ..x
END
IS xclosure _bb777
END
IS Struct _bb772
BUILTIN x I1
BEGIN _bb782
inline _bb783 Struct
return # this
END
new struct _bb782
BUILTIN x I2
BEGIN _bb785
BUILTIN _bb786 "Assertion failed"
fail # _bb786
END
BUILTIN _bb788 Bfalse
BUILTIN _bb790 I0
get _bb792 struct xthis
call _bb791 # _bb792
eq _bb789 _bb791 _bb790
eq _bb787 _bb789 _bb788
if # _bb787 _bb785
BEGIN _bb793
BUILTIN _bb794 "Assertion failed"
fail # _bb794
END
BUILTIN _bb796 Bfalse
BUILTIN _bb798 I1
get _bb800 struct xclosure
call _bb799 # _bb800
eq _bb797 _bb799 _bb798
eq _bb795 _bb797 _bb796
if # _bb795 _bb793
return # #
END
try _bbmacro14 _bb771
BEGIN _bb801
BEGIN _bb803
str _bb805 _bbmacro14
BUILTIN _bb807 "\n"
BUILTIN _bb808 "Closure"
add _bb806 _bb808 _bb807
add _bb804 _bb806 _bb805
list args _bb804
END
get _bb810 bb logger
get _bb809 _bb810 fail
call _bb802 _bb803 _bb809
END
BEGIN _bb811
BEGIN _bb813
BUILTIN _bb814 "Closure"
list args _bb814
END
get _bb816 bb logger
get _bb815 _bb816 ok
call _bb812 _bb813 _bb815
END
catch # _bbmacro14 _bb801 _bb811
BEGIN _bb819
BEGIN _bb822
BUILTIN x I1
return # this
END
new A _bb822
BEGIN _bb825
BUILTIN _bb826 "Assertion failed"
fail # _bb826
END
BUILTIN _bb828 Bfalse
BUILTIN _bb830 I1
get _bb831 A x
eq _bb829 _bb831 _bb830
eq _bb827 _bb829 _bb828
if # _bb827 _bb825
clear # A
BEGIN _bb835
get _bb836 A x
print # _bb836
END
try err _bb835
BEGIN _bb837
BUILTIN _bb838 "Assertion failed"
fail # _bb838
END
BUILTIN _bb840 Bfalse
BEGIN _bb843
BEGIN _bb844
BUILTIN _bb845 Btrue
return # _bb845
END
BEGIN _bb846
BUILTIN _bb847 Bfalse
return # _bb847
END
catch # err _bb844 _bb846
END
try _bb841 _bb843
eq _bb839 _bb841 _bb840
if # _bb839 _bb837
BEGIN _bb850
BUILTIN x I1
return # this
END
new B _bb850
move C B
BEGIN _bb856
get _bb857 B x
print # _bb857
END
try err _bb856
BEGIN _bb858
BUILTIN _bb859 "Assertion failed"
fail # _bb859
END
BUILTIN _bb861 Bfalse
BEGIN _bb864
BEGIN _bb865
BUILTIN _bb866 Btrue
return # _bb866
END
BEGIN _bb867
BUILTIN _bb868 Bfalse
return # _bb868
END
catch # err _bb865 _bb867
END
try _bb862 _bb864
eq _bb860 _bb862 _bb861
if # _bb860 _bb858
BEGIN _bb869
BUILTIN _bb870 "Assertion failed"
fail # _bb870
END
BUILTIN _bb872 Bfalse
BUILTIN _bb874 I1
get _bb875 C x
eq _bb873 _bb875 _bb874
eq _bb871 _bb873 _bb872
if # _bb871 _bb869
return # #
END
try _bbmacro15 _bb819
BEGIN _bb876
BEGIN _bb878
str _bb880 _bbmacro15
BUILTIN _bb882 "\n"
BUILTIN _bb883 "Clear"
add _bb881 _bb883 _bb882
add _bb879 _bb881 _bb880
list args _bb879
END
get _bb885 bb logger
get _bb884 _bb885 fail
call _bb877 _bb878 _bb884
END
BEGIN _bb886
BEGIN _bb888
BUILTIN _bb889 "Clear"
list args _bb889
END
get _bb891 bb logger
get _bb890 _bb891 ok
call _bb887 _bb888 _bb890
END
catch # _bbmacro15 _bb876 _bb886
BEGIN _bb894
BEGIN _bb895
next A args
move A A
len _bb896 A
return # _bb896
END
IS waslength _bb895
BUILTIN _bb897 I1
BUILTIN _bb898 I2
BUILTIN _bb899 I3
list A _bb897 _bb898 _bb899
BEGIN _bb901
BUILTIN _bb902 "Assertion failed"
fail # _bb902
END
BUILTIN _bb904 Bfalse
BUILTIN _bb906 I3
len _bb907 A
eq _bb905 _bb907 _bb906
eq _bb903 _bb905 _bb904
if # _bb903 _bb901
BEGIN _bb908
BUILTIN _bb909 "Assertion failed"
fail # _bb909
END
BUILTIN _bb911 Bfalse
BUILTIN _bb913 I3
BEGIN _bb915
list args A
END
call _bb914 _bb915 waslength
eq _bb912 _bb914 _bb913
eq _bb910 _bb912 _bb911
if # _bb910 _bb908
BEGIN _bb916
BUILTIN _bb917 "Assertion failed"
fail # _bb917
END
BUILTIN _bb919 Bfalse
BUILTIN _bb921 I0
len _bb922 A
eq _bb920 _bb922 _bb921
eq _bb918 _bb920 _bb919
if # _bb918 _bb916
return # #
END
try _bbmacro16 _bb894
BEGIN _bb923
BEGIN _bb925
str _bb927 _bbmacro16
BUILTIN _bb929 "\n"
BUILTIN _bb930 "Move "
add _bb928 _bb930 _bb929
add _bb926 _bb928 _bb927
list args _bb926
END
get _bb932 bb logger
get _bb931 _bb932 fail
call _bb924 _bb925 _bb931
END
BEGIN _bb933
BEGIN _bb935
BUILTIN _bb936 "Move "
list args _bb936
END
get _bb938 bb logger
get _bb937 _bb938 ok
call _bb934 _bb935 _bb937
END
catch # _bbmacro16 _bb923 _bb933
BEGIN _bb941
BUILTIN _bb942 I1
BUILTIN _bb943 I2
BUILTIN _bb944 I3
list A _bb942 _bb943 _bb944
BEGIN _bb947
list args A
END
BEGIN _bb950
BUILTIN _bb951 I4
list args _bb951
END
get _bb953 bb collection
get _bb952 _bb953 toback
call _bb949 _bb950 _bb952
call _bb946 _bb947 _bb949
IS A _bb946
BEGIN _bb954
BUILTIN _bb955 "Assertion failed"
fail # _bb955
END
BUILTIN _bb957 Bfalse
BUILTIN _bb959 I4
pop _bb960 A
eq _bb958 _bb960 _bb959
eq _bb956 _bb958 _bb957
if # _bb956 _bb954
return # #
END
try _bbmacro17 _bb941
BEGIN _bb961
BEGIN _bb963
str _bb965 _bbmacro17
BUILTIN _bb967 "\n"
BUILTIN _bb968 "Collection"
add _bb966 _bb968 _bb967
add _bb964 _bb966 _bb965
list args _bb964
END
get _bb970 bb logger
get _bb969 _bb970 fail
call _bb962 _bb963 _bb969
END
BEGIN _bb971
BEGIN _bb973
BUILTIN _bb974 "Collection"
list args _bb974
END
get _bb976 bb logger
get _bb975 _bb976 ok
call _bb972 _bb973 _bb975
END
catch # _bbmacro17 _bb961 _bb971
BEGIN _bb979
BUILTIN A "I like banana!"
BEGIN _bb981
BUILTIN _bb982 "Assertion failed"
fail # _bb982
END
BUILTIN _bb984 Bfalse
BEGIN _bb986
list args A
END
BEGIN _bb989
BUILTIN _bb990 "I like"
list args _bb990
END
get _bb992 bb string
get _bb991 _bb992 starts
call _bb988 _bb989 _bb991
call _bb985 _bb986 _bb988
eq _bb983 _bb985 _bb984
if # _bb983 _bb981
BEGIN _bb993
BUILTIN _bb994 "Assertion failed"
fail # _bb994
END
BUILTIN _bb996 Bfalse
BEGIN _bb998
list args A
END
BEGIN _bb1001
BUILTIN _bb1002 "banana!"
list args _bb1002
END
get _bb1004 bb string
get _bb1003 _bb1004 ends
call _bb1000 _bb1001 _bb1003
call _bb997 _bb998 _bb1000
eq _bb995 _bb997 _bb996
if # _bb995 _bb993
BEGIN _bb1005
BUILTIN _bb1006 "Assertion failed"
fail # _bb1006
END
BUILTIN _bb1008 Bfalse
BUILTIN _bb1010 I3
BEGIN _bb1013
list args A
END
BEGIN _bb1016
BUILTIN _bb1017 " "
list args _bb1017
END
get _bb1019 bb string
get _bb1018 _bb1019 split
call _bb1015 _bb1016 _bb1018
call _bb1012 _bb1013 _bb1015
len _bb1011 _bb1012
eq _bb1009 _bb1011 _bb1010
eq _bb1007 _bb1009 _bb1008
if # _bb1007 _bb1005
BEGIN _bb1020
BUILTIN _bb1021 "Assertion failed"
fail # _bb1021
END
BUILTIN _bb1023 Bfalse
BUILTIN _bb1025 I2
BEGIN _bb1027
list args A
END
BEGIN _bb1030
BUILTIN _bb1031 "like"
list args _bb1031
END
get _bb1033 bb string
get _bb1032 _bb1033 index
call _bb1029 _bb1030 _bb1032
call _bb1026 _bb1027 _bb1029
eq _bb1024 _bb1026 _bb1025
eq _bb1022 _bb1024 _bb1023
if # _bb1022 _bb1020
BEGIN _bb1034
BUILTIN _bb1035 "Assertion failed"
fail # _bb1035
END
BUILTIN _bb1037 Bfalse
BUILTIN _bb1039 I10
BEGIN _bb1041
list args A
END
BEGIN _bb1044
BUILTIN _bb1045 "an"
list args _bb1045
BUILTIN pos I9
END
get _bb1048 bb string
get _bb1047 _bb1048 index
call _bb1043 _bb1044 _bb1047
call _bb1040 _bb1041 _bb1043
eq _bb1038 _bb1040 _bb1039
eq _bb1036 _bb1038 _bb1037
if # _bb1036 _bb1034
return # #
END
try _bbmacro18 _bb979
BEGIN _bb1049
BEGIN _bb1051
str _bb1053 _bbmacro18
BUILTIN _bb1055 "\n"
BUILTIN _bb1056 "String"
add _bb1054 _bb1056 _bb1055
add _bb1052 _bb1054 _bb1053
list args _bb1052
END
get _bb1058 bb logger
get _bb1057 _bb1058 fail
call _bb1050 _bb1051 _bb1057
END
BEGIN _bb1059
BEGIN _bb1061
BUILTIN _bb1062 "String"
list args _bb1062
END
get _bb1064 bb logger
get _bb1063 _bb1064 ok
call _bb1060 _bb1061 _bb1063
END
catch # _bbmacro18 _bb1049 _bb1059
BEGIN _bb1067
BEGIN _bb1070
BUILTIN value I0
BEGIN _bb1072
next x args
get _bb1073 this value
add _bb1073 _bb1073 x
set # this value _bb1073
END
IS add _bb1072
return # this
END
new accum _bb1070
final # accum
BUILTIN _bb1075 I10
range _bb1074 _bb1075
iter _bbmacro20 _bb1074
BEGIN _bb1079
BEGIN _bb1080
next _bb1081 _bbmacro20
AS i _bb1081
exists _bb1082 i
END
BEGIN _bb1083
BEGIN _bb1085
list args i
END
get _bb1086 accum add
call _bb1084 _bb1085 _bb1086
END
while # _bb1080 _bb1083
END
try _bb1077 _bb1079
BEGIN _bb1087
BUILTIN _bb1088 "Assertion failed"
fail # _bb1088
END
BUILTIN _bb1090 Bfalse
BUILTIN _bb1092 I45
get _bb1093 accum value
eq _bb1091 _bb1093 _bb1092
eq _bb1089 _bb1091 _bb1090
if # _bb1089 _bb1087
return # #
END
try _bbmacro19 _bb1067
BEGIN _bb1094
BEGIN _bb1096
str _bb1098 _bbmacro19
BUILTIN _bb1100 "\n"
BUILTIN _bb1101 "Atomicity"
add _bb1099 _bb1101 _bb1100
add _bb1097 _bb1099 _bb1098
list args _bb1097
END
get _bb1103 bb logger
get _bb1102 _bb1103 fail
call _bb1095 _bb1096 _bb1102
END
BEGIN _bb1104
BEGIN _bb1106
BUILTIN _bb1107 "Atomicity"
list args _bb1107
END
get _bb1109 bb logger
get _bb1108 _bb1109 ok
call _bb1105 _bb1106 _bb1108
END
catch # _bbmacro19 _bb1094 _bb1104
BEGIN _bb1112
BEGIN _bb1115
BEGIN _bb1116
BEGIN _bb1118
list args B
END
call _bb1117 _bb1118 extern2
return # _bb1117
END
IS foo1 _bb1116
BEGIN _bb1119
BEGIN _bb1121
list args this
END
call _bb1120 _bb1121 extern3
return # _bb1120
END
IS foo2 _bb1119
BEGIN _bb1122
get _bb1124 B foo1
call _bb1123 # _bb1124
return # _bb1123
END
IS foo3 _bb1122
return # this
END
new A _bb1115
final # A
BEGIN _bb1127
BEGIN _bb1128
BEGIN _bb1130
list args A
END
call _bb1129 _bb1130 extern2
return # _bb1129
END
IS foo1 _bb1128
BEGIN _bb1131
BEGIN _bb1133
list args this
END
call _bb1132 _bb1133 extern3
return # _bb1132
END
IS foo2 _bb1131
BEGIN _bb1134
BUILTIN _bb1135 I1
return # _bb1135
END
IS foo3 _bb1134
return # this
END
new B _bb1127
final # B
BEGIN _bb1136
next obj args
get _bb1138 obj foo1
call _bb1137 # _bb1138
return # _bb1137
END
IS extern1 _bb1136
final # extern1
BEGIN _bb1139
next obj args
get _bb1141 obj foo2
call _bb1140 # _bb1141
return # _bb1140
END
IS extern2 _bb1139
final # extern2
BEGIN _bb1142
next obj args
get _bb1144 obj foo3
call _bb1143 # _bb1144
return # _bb1143
END
IS extern3 _bb1142
final # extern3
BEGIN _bb1145
BUILTIN _bb1146 "Assertion failed"
fail # _bb1146
END
BUILTIN _bb1148 Bfalse
BUILTIN _bb1150 I1
BEGIN _bb1152
list args A
END
call _bb1151 _bb1152 extern1
eq _bb1149 _bb1151 _bb1150
eq _bb1147 _bb1149 _bb1148
if # _bb1147 _bb1145
return # #
END
try _bbmacro21 _bb1112
BEGIN _bb1153
BEGIN _bb1155
str _bb1157 _bbmacro21
BUILTIN _bb1159 "\n"
BUILTIN _bb1160 "No deadlock"
add _bb1158 _bb1160 _bb1159
add _bb1156 _bb1158 _bb1157
list args _bb1156
END
get _bb1162 bb logger
get _bb1161 _bb1162 fail
call _bb1154 _bb1155 _bb1161
END
BEGIN _bb1163
BEGIN _bb1165
BUILTIN _bb1166 "No deadlock"
list args _bb1166
END
get _bb1168 bb logger
get _bb1167 _bb1168 ok
call _bb1164 _bb1165 _bb1167
END
catch # _bbmacro21 _bb1153 _bb1163
BEGIN _bb1171
BUILTIN _bb1172 ".cache/database.db"
sqlite db _bb1172
BUILTIN _bb1175 "CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER);"
at _bb1174 db _bb1175
BUILTIN n I100000
time start
BUILTIN _bb1179 "BEGIN TRANSACTION;"
at _bb1178 db _bb1179
range _bb1180 n
iter _bbmacro23 _bb1180
BEGIN _bb1182
next _bb1183 _bbmacro23
AS i _bb1183
exists _bb1184 i
END
BEGIN _bb1185
BUILTIN _bb1188 ");"
BUILTIN _bb1192 I10
mod _bb1191 i _bb1192
BUILTIN _bb1193 I20
add _bb1190 _bb1193 _bb1191
str _bb1194 _bb1190
BUILTIN _bb1196 "', "
str _bb1198 i
BUILTIN _bb1199 "INSERT INTO users (name, age) VALUES ('User"
add _bb1197 _bb1199 _bb1198
add _bb1195 _bb1197 _bb1196
add _bb1189 _bb1195 _bb1194
add _bb1187 _bb1189 _bb1188
at _bb1186 db _bb1187
BUILTIN _bb1202 ";"
str _bb1204 i
BUILTIN _bb1205 "SELECT * FROM users WHERE id = "
add _bb1203 _bb1205 _bb1204
add _bb1201 _bb1203 _bb1202
at _bb1200 db _bb1201
BUILTIN _bb1208 ";"
str _bb1210 i
BUILTIN _bb1211 "UPDATE users SET age = age + 1 WHERE id = "
add _bb1209 _bb1211 _bb1210
add _bb1207 _bb1209 _bb1208
at _bb1206 db _bb1207
END
while # _bb1182 _bb1185
BUILTIN _bb1213 "COMMIT;"
at _bb1212 db _bb1213
time _bb1215
sub eta _bb1215 start
BEGIN _bb1216
BUILTIN _bb1217 "Assertion failed"
fail # _bb1217
END
BUILTIN _bb1219 Bfalse
BUILTIN _bb1221 I1
lt _bb1220 eta _bb1221
eq _bb1218 _bb1220 _bb1219
if # _bb1218 _bb1216
BEGIN _bb1222
BUILTIN _bb1223 "Assertion failed"
fail # _bb1223
END
BUILTIN _bb1225 Bfalse
BUILTIN _bb1229 "SELECT * FROM users;"
at _bb1228 db _bb1229
len _bb1227 _bb1228
eq _bb1226 n _bb1227
eq _bb1224 _bb1226 _bb1225
if # _bb1224 _bb1222
BUILTIN _bb1231 "DELETE FROM users;"
at _bb1230 db _bb1231
return # #
END
try _bbmacro22 _bb1171
BEGIN _bb1232
BEGIN _bb1234
str _bb1236 _bbmacro22
BUILTIN _bb1238 "\n"
BUILTIN _bb1239 "Database"
add _bb1237 _bb1239 _bb1238
add _bb1235 _bb1237 _bb1236
list args _bb1235
END
get _bb1241 bb logger
get _bb1240 _bb1241 fail
call _bb1233 _bb1234 _bb1240
END
BEGIN _bb1242
BEGIN _bb1244
BUILTIN _bb1245 "Database"
list args _bb1245
END
get _bb1247 bb logger
get _bb1246 _bb1247 ok
call _bb1243 _bb1244 _bb1246
END
catch # _bbmacro22 _bb1232 _bb1242
