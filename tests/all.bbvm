BEGIN _bb15
BUILTIN red "\e[0;31m"
final # red
BUILTIN green "\e[0;32m"
final # green
BUILTIN reset "\e[0m"
final # reset
return # this
END
new ansi _bb15
final # ansi
BEGIN _bb35
BEGIN _bb36
next element args
BEGIN _bb39
get _bb40 this element
IS .element _bb40
BEGIN _bb41
next A args
get _bb42 this .element
IS ..element _bb42
push # A ..element
return # A
END
IS call _bb41
return # this
END
new _bb37 _bb39
return # _bb37
END
IS push_back _bb36
final # push_back
return # this
END
new collection _bb35
final # collection
BEGIN _bb60
BEGIN _bb61
next value args
str _bb62 value
return # _bb62
END
IS call _bb61
BEGIN _bb63
next query args
str query query
BEGIN _bb66
get _bb67 this query
IS .query _bb67
BEGIN _bb68
next search args
str search search
get _bb69 this .query
IS ..query _bb69
IS query ..query
len nsearch search
len nquery query
BEGIN _bb72
BUILTIN _bb73 Bfalse
return # _bb73
END
lt _bb74 nsearch nquery
if # _bb74 _bb72
range _bb75 nquery
iter _bbmacro1 _bb75
BEGIN _bb77
next _bb78 _bbmacro1
AS i _bb78
exists _bb79 i
END
BEGIN _bb80
BEGIN _bb81
BUILTIN _bb82 Bfalse
return # _bb82
END
at _bb84 search i
at _bb85 query i
neq _bb83 _bb85 _bb84
if # _bb83 _bb81
END
while # _bb77 _bb80
BUILTIN _bb86 Btrue
return # _bb86
END
IS call _bb68
return # this
END
new _bb64 _bb66
return # _bb64
END
IS starts_with _bb63
final # starts_with
BEGIN _bb87
next query args
str query query
BEGIN _bb90
get _bb91 this query
IS .query _bb91
BEGIN _bb92
next search args
str search search
get _bb93 this .query
IS ..query _bb93
IS query ..query
len nsearch search
len nquery query
BEGIN _bb96
BUILTIN _bb97 Bfalse
return # _bb97
END
lt _bb98 nsearch nquery
if # _bb98 _bb96
range _bb99 nquery
iter _bbmacro2 _bb99
BEGIN _bb101
next _bb102 _bbmacro2
AS i _bb102
exists _bb103 i
END
BEGIN _bb104
BEGIN _bb105
BUILTIN _bb106 Bfalse
return # _bb106
END
sub _bb110 nsearch nquery
add _bb109 _bb110 i
at _bb108 search _bb109
at _bb111 query i
neq _bb107 _bb111 _bb108
if # _bb107 _bb105
END
while # _bb101 _bb104
BUILTIN _bb112 Btrue
return # _bb112
END
IS call _bb92
return # this
END
new _bb88 _bb90
return # _bb88
END
IS ends_with _bb87
final # ends_with
return # this
END
new string _bb60
final # string
BEGIN _bb184
BUILTIN _bb185 I1
BUILTIN _bb186 I2
BUILTIN _bb187 I3
BUILTIN _bb188 I4
list A _bb185 _bb186 _bb187 _bb188
BEGIN _bb190
BUILTIN _bb191 "Assertion failed: A[1]==2"
fail # _bb191
END
BUILTIN _bb193 Bfalse
BUILTIN _bb195 I2
BUILTIN _bb197 I1
at _bb196 A _bb197
eq _bb194 _bb196 _bb195
eq _bb192 _bb194 _bb193
if # _bb192 _bb190
BEGIN _bb198
BUILTIN _bb199 "Assertion failed: A|next==1"
fail # _bb199
END
BUILTIN _bb201 Bfalse
BUILTIN _bb203 I1
next _bb204 A
eq _bb202 _bb204 _bb203
eq _bb200 _bb202 _bb201
if # _bb200 _bb198
BEGIN _bb205
BUILTIN _bb206 "Assertion failed: A|next==2"
fail # _bb206
END
BUILTIN _bb208 Bfalse
BUILTIN _bb210 I2
next _bb211 A
eq _bb209 _bb211 _bb210
eq _bb207 _bb209 _bb208
if # _bb207 _bb205
BEGIN _bb212
BUILTIN _bb213 "Assertion failed: A|pop==4"
fail # _bb213
END
BUILTIN _bb215 Bfalse
BUILTIN _bb217 I4
pop _bb218 A
eq _bb216 _bb218 _bb217
eq _bb214 _bb216 _bb215
if # _bb214 _bb212
BEGIN _bb219
BUILTIN _bb220 "Assertion failed: A|pop==3"
fail # _bb220
END
BUILTIN _bb222 Bfalse
BUILTIN _bb224 I3
pop _bb225 A
eq _bb223 _bb225 _bb224
eq _bb221 _bb223 _bb222
if # _bb221 _bb219
BEGIN _bb226
BUILTIN _bb227 "Assertion failed: A|len==0"
fail # _bb227
END
BUILTIN _bb229 Bfalse
BUILTIN _bb231 I0
len _bb232 A
eq _bb230 _bb232 _bb231
eq _bb228 _bb230 _bb229
if # _bb228 _bb226
BUILTIN _bb233 I5
push # A _bb233
BEGIN _bb234
BUILTIN _bb235 "Assertion failed: A|pop==5"
fail # _bb235
END
BUILTIN _bb237 Bfalse
BUILTIN _bb239 I5
pop _bb240 A
eq _bb238 _bb240 _bb239
eq _bb236 _bb238 _bb237
if # _bb236 _bb234
return # #
END
try _bbmacro5 _bb184
BEGIN _bb241
str _bb243 _bbmacro5
BUILTIN _bb245 "\n"
BUILTIN _bb247 "List"
BUILTIN _bb249 " ] "
get _bb251 ansi reset
str _bb252 _bb251
BUILTIN _bb254 "fail"
get _bb256 ansi red
str _bb257 _bb256
BUILTIN _bb258 "[ "
add _bb255 _bb258 _bb257
add _bb253 _bb255 _bb254
add _bb250 _bb253 _bb252
add _bb248 _bb250 _bb249
add _bb246 _bb248 _bb247
add _bb244 _bb246 _bb245
add _bb242 _bb244 _bb243
print # _bb242
END
BEGIN _bb259
BUILTIN _bb261 "List"
BUILTIN _bb263 "  ] "
get _bb265 ansi reset
str _bb266 _bb265
BUILTIN _bb268 "ok"
get _bb270 ansi green
str _bb271 _bb270
BUILTIN _bb272 "[  "
add _bb269 _bb272 _bb271
add _bb267 _bb269 _bb268
add _bb264 _bb267 _bb266
add _bb262 _bb264 _bb263
add _bb260 _bb262 _bb261
print # _bb260
END
catch # _bbmacro5 _bb241 _bb259
BEGIN _bb275
BUILTIN s I0
BUILTIN _bb278 I10
range _bb277 _bb278
iter _bbmacro7 _bb277
BEGIN _bb280
next _bb281 _bbmacro7
AS i _bb281
exists _bb282 i
END
BEGIN _bb283
add s s i
END
while # _bb280 _bb283
BEGIN _bb284
BUILTIN _bb285 "Assertion failed: s==45"
fail # _bb285
END
BUILTIN _bb287 Bfalse
BUILTIN _bb289 I45
eq _bb288 s _bb289
eq _bb286 _bb288 _bb287
if # _bb286 _bb284
return # #
END
try _bbmacro6 _bb275
BEGIN _bb290
str _bb292 _bbmacro6
BUILTIN _bb294 "\n"
BUILTIN _bb296 "Range"
BUILTIN _bb298 " ] "
get _bb300 ansi reset
str _bb301 _bb300
BUILTIN _bb303 "fail"
get _bb305 ansi red
str _bb306 _bb305
BUILTIN _bb307 "[ "
add _bb304 _bb307 _bb306
add _bb302 _bb304 _bb303
add _bb299 _bb302 _bb301
add _bb297 _bb299 _bb298
add _bb295 _bb297 _bb296
add _bb293 _bb295 _bb294
add _bb291 _bb293 _bb292
print # _bb291
END
BEGIN _bb308
BUILTIN _bb310 "Range"
BUILTIN _bb312 "  ] "
get _bb314 ansi reset
str _bb315 _bb314
BUILTIN _bb317 "ok"
get _bb319 ansi green
str _bb320 _bb319
BUILTIN _bb321 "[  "
add _bb318 _bb321 _bb320
add _bb316 _bb318 _bb317
add _bb313 _bb316 _bb315
add _bb311 _bb313 _bb312
add _bb309 _bb311 _bb310
print # _bb309
END
catch # _bbmacro6 _bb290 _bb308
BEGIN _bb324
BUILTIN _bb325 I1
BUILTIN _bb326 I2
BUILTIN _bb327 I3
list A _bb325 _bb326 _bb327
BUILTIN s I0
iter _bbmacro9 A
BEGIN _bb331
next _bb332 _bbmacro9
AS x _bb332
exists _bb333 x
END
BEGIN _bb334
add s s x
END
while # _bb331 _bb334
iter it A
BEGIN _bb336
next _bb337 it
AS x _bb337
exists _bb338 x
END
BEGIN _bb339
sub s s x
END
while # _bb336 _bb339
BEGIN _bb340
BUILTIN _bb341 "Assertion failed: s==0"
fail # _bb341
END
BUILTIN _bb343 Bfalse
BUILTIN _bb345 I0
eq _bb344 s _bb345
eq _bb342 _bb344 _bb343
if # _bb342 _bb340
return # #
END
try _bbmacro8 _bb324
BEGIN _bb346
str _bb348 _bbmacro8
BUILTIN _bb350 "\n"
BUILTIN _bb352 "Iteration"
BUILTIN _bb354 " ] "
get _bb356 ansi reset
str _bb357 _bb356
BUILTIN _bb359 "fail"
get _bb361 ansi red
str _bb362 _bb361
BUILTIN _bb363 "[ "
add _bb360 _bb363 _bb362
add _bb358 _bb360 _bb359
add _bb355 _bb358 _bb357
add _bb353 _bb355 _bb354
add _bb351 _bb353 _bb352
add _bb349 _bb351 _bb350
add _bb347 _bb349 _bb348
print # _bb347
END
BEGIN _bb364
BUILTIN _bb366 "Iteration"
BUILTIN _bb368 "  ] "
get _bb370 ansi reset
str _bb371 _bb370
BUILTIN _bb373 "ok"
get _bb375 ansi green
str _bb376 _bb375
BUILTIN _bb377 "[  "
add _bb374 _bb377 _bb376
add _bb372 _bb374 _bb373
add _bb369 _bb372 _bb371
add _bb367 _bb369 _bb368
add _bb365 _bb367 _bb366
print # _bb365
END
catch # _bbmacro8 _bb346 _bb364
BEGIN _bb380
BEGIN _bb381
get _bb382 this x
IS .x _bb382
BUILTIN x I0
BEGIN _bb384
get _bb385 this x
return # _bb385
END
IS xthis _bb384
BEGIN _bb386
get _bb387 this .x
IS ..x _bb387
return # ..x
END
IS xclosure _bb386
END
IS Struct _bb381
BUILTIN x I1
BEGIN _bb391
inline _bb392 Struct
return # this
END
new struct _bb391
BUILTIN x I2
BEGIN _bb394
BUILTIN _bb395 "Assertion failed: struct.xthis()==0"
fail # _bb395
END
BUILTIN _bb397 Bfalse
BUILTIN _bb399 I0
get _bb401 struct xthis
call _bb400 # _bb401
eq _bb398 _bb400 _bb399
eq _bb396 _bb398 _bb397
if # _bb396 _bb394
BEGIN _bb402
BUILTIN _bb403 "Assertion failed: struct.xclosure()==1"
fail # _bb403
END
BUILTIN _bb405 Bfalse
BUILTIN _bb407 I1
get _bb409 struct xclosure
call _bb408 # _bb409
eq _bb406 _bb408 _bb407
eq _bb404 _bb406 _bb405
if # _bb404 _bb402
return # #
END
try _bbmacro10 _bb380
BEGIN _bb410
str _bb412 _bbmacro10
BUILTIN _bb414 "\n"
BUILTIN _bb416 "Closure"
BUILTIN _bb418 " ] "
get _bb420 ansi reset
str _bb421 _bb420
BUILTIN _bb423 "fail"
get _bb425 ansi red
str _bb426 _bb425
BUILTIN _bb427 "[ "
add _bb424 _bb427 _bb426
add _bb422 _bb424 _bb423
add _bb419 _bb422 _bb421
add _bb417 _bb419 _bb418
add _bb415 _bb417 _bb416
add _bb413 _bb415 _bb414
add _bb411 _bb413 _bb412
print # _bb411
END
BEGIN _bb428
BUILTIN _bb430 "Closure"
BUILTIN _bb432 "  ] "
get _bb434 ansi reset
str _bb435 _bb434
BUILTIN _bb437 "ok"
get _bb439 ansi green
str _bb440 _bb439
BUILTIN _bb441 "[  "
add _bb438 _bb441 _bb440
add _bb436 _bb438 _bb437
add _bb433 _bb436 _bb435
add _bb431 _bb433 _bb432
add _bb429 _bb431 _bb430
print # _bb429
END
catch # _bbmacro10 _bb410 _bb428
BEGIN _bb444
BUILTIN _bb445 I1
BUILTIN _bb446 I2
BUILTIN _bb447 I3
list A _bb445 _bb446 _bb447
BEGIN _bb450
list args A
END
BEGIN _bb453
BUILTIN _bb454 I4
list args _bb454
END
get _bb455 collection push_back
call _bb452 _bb453 _bb455
call _bb449 _bb450 _bb452
IS A _bb449
BEGIN _bb456
BUILTIN _bb457 "Assertion failed: A|pop==4"
fail # _bb457
END
BUILTIN _bb459 Bfalse
BUILTIN _bb461 I4
pop _bb462 A
eq _bb460 _bb462 _bb461
eq _bb458 _bb460 _bb459
if # _bb458 _bb456
return # #
END
try _bbmacro11 _bb444
BEGIN _bb463
str _bb465 _bbmacro11
BUILTIN _bb467 "\n"
BUILTIN _bb469 "Collection"
BUILTIN _bb471 " ] "
get _bb473 ansi reset
str _bb474 _bb473
BUILTIN _bb476 "fail"
get _bb478 ansi red
str _bb479 _bb478
BUILTIN _bb480 "[ "
add _bb477 _bb480 _bb479
add _bb475 _bb477 _bb476
add _bb472 _bb475 _bb474
add _bb470 _bb472 _bb471
add _bb468 _bb470 _bb469
add _bb466 _bb468 _bb467
add _bb464 _bb466 _bb465
print # _bb464
END
BEGIN _bb481
BUILTIN _bb483 "Collection"
BUILTIN _bb485 "  ] "
get _bb487 ansi reset
str _bb488 _bb487
BUILTIN _bb490 "ok"
get _bb492 ansi green
str _bb493 _bb492
BUILTIN _bb494 "[  "
add _bb491 _bb494 _bb493
add _bb489 _bb491 _bb490
add _bb486 _bb489 _bb488
add _bb484 _bb486 _bb485
add _bb482 _bb484 _bb483
print # _bb482
END
catch # _bbmacro11 _bb463 _bb481
BEGIN _bb497
BUILTIN A "I like banana!"
BEGIN _bb499
BUILTIN _bb500 "Assertion failed: A|string.starts_with(I like)"
fail # _bb500
END
BUILTIN _bb502 Bfalse
BEGIN _bb504
list args A
END
BEGIN _bb507
BUILTIN _bb508 "I like"
list args _bb508
END
get _bb509 string starts_with
call _bb506 _bb507 _bb509
call _bb503 _bb504 _bb506
eq _bb501 _bb503 _bb502
if # _bb501 _bb499
BEGIN _bb510
BUILTIN _bb511 "Assertion failed: A|string.ends_with(banana!)"
fail # _bb511
END
BUILTIN _bb513 Bfalse
BEGIN _bb515
list args A
END
BEGIN _bb518
BUILTIN _bb519 "banana!"
list args _bb519
END
get _bb520 string ends_with
call _bb517 _bb518 _bb520
call _bb514 _bb515 _bb517
eq _bb512 _bb514 _bb513
if # _bb512 _bb510
return # #
END
try _bbmacro12 _bb497
BEGIN _bb521
str _bb523 _bbmacro12
BUILTIN _bb525 "\n"
BUILTIN _bb527 "String"
BUILTIN _bb529 " ] "
get _bb531 ansi reset
str _bb532 _bb531
BUILTIN _bb534 "fail"
get _bb536 ansi red
str _bb537 _bb536
BUILTIN _bb538 "[ "
add _bb535 _bb538 _bb537
add _bb533 _bb535 _bb534
add _bb530 _bb533 _bb532
add _bb528 _bb530 _bb529
add _bb526 _bb528 _bb527
add _bb524 _bb526 _bb525
add _bb522 _bb524 _bb523
print # _bb522
END
BEGIN _bb539
BUILTIN _bb541 "String"
BUILTIN _bb543 "  ] "
get _bb545 ansi reset
str _bb546 _bb545
BUILTIN _bb548 "ok"
get _bb550 ansi green
str _bb551 _bb550
BUILTIN _bb552 "[  "
add _bb549 _bb552 _bb551
add _bb547 _bb549 _bb548
add _bb544 _bb547 _bb546
add _bb542 _bb544 _bb543
add _bb540 _bb542 _bb541
print # _bb540
END
catch # _bbmacro12 _bb521 _bb539
