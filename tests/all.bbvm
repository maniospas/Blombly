BEGIN _bb16
BEGIN _bb19
BUILTIN red "\e[0;31m"
final # red
BUILTIN green "\e[0;32m"
final # green
BUILTIN reset "\e[0m"
final # reset
return # this
END
new ansi _bb19
final # ansi
BEGIN _bb39
BEGIN _bb40
next element args
BEGIN _bb43
get _bb44 this element
IS .element _bb44
BEGIN _bb45
next A args
get _bb46 this .element
IS ..element _bb46
push # A ..element
return # A
END
IS call _bb45
return # this
END
new _bb41 _bb43
return # _bb41
END
IS toback _bb40
final # toback
return # this
END
new collection _bb39
final # collection
BEGIN _bb96
BEGIN _bb97
next value args
str value value
return # value
END
IS call _bb97
BEGIN _bb143
next query args
str query query
BEGIN _bb146
get _bb147 this query
IS .query _bb147
BEGIN _bb148
BUILTIN _bb149 "Assertion failed: args|len==0"
fail # _bb149
END
BUILTIN _bb151 Bfalse
BUILTIN _bb153 I0
len _bb154 args
eq _bb152 _bb154 _bb153
eq _bb150 _bb152 _bb151
if # _bb150 _bb148
BEGIN _bb155
next search args
str search search
get _bb156 this .query
IS ..query _bb156
BEGIN _bb157
BUILTIN _bb158 "Assertion failed: args|len==0"
fail # _bb158
END
BUILTIN _bb160 Bfalse
BUILTIN _bb162 I0
len _bb163 args
eq _bb161 _bb163 _bb162
eq _bb159 _bb161 _bb160
if # _bb159 _bb157
IS query ..query
len nsearch search
len nquery query
BEGIN _bb166
BUILTIN _bb167 Bfalse
return # _bb167
END
lt _bb168 nsearch nquery
if # _bb168 _bb166
range _bb169 nquery
iter _bbmacro2 _bb169
BEGIN _bb171
next _bb172 _bbmacro2
AS i _bb172
exists _bb173 i
END
BEGIN _bb174
BEGIN _bb175
BUILTIN _bb176 Bfalse
return # _bb176
END
at _bb178 search i
at _bb179 query i
neq _bb177 _bb179 _bb178
if # _bb177 _bb175
END
while # _bb171 _bb174
BUILTIN _bb180 Btrue
return # _bb180
END
IS call _bb155
return # this
END
new _bb144 _bb146
return # _bb144
END
IS starts _bb143
final # starts
BEGIN _bb181
next query args
str query query
BEGIN _bb184
get _bb185 this query
IS .query _bb185
BEGIN _bb186
BUILTIN _bb187 "Assertion failed: args|len==0"
fail # _bb187
END
BUILTIN _bb189 Bfalse
BUILTIN _bb191 I0
len _bb192 args
eq _bb190 _bb192 _bb191
eq _bb188 _bb190 _bb189
if # _bb188 _bb186
BEGIN _bb193
next search args
str search search
get _bb194 this .query
IS ..query _bb194
BEGIN _bb195
BUILTIN _bb196 "Assertion failed: args|len==0"
fail # _bb196
END
BUILTIN _bb198 Bfalse
BUILTIN _bb200 I0
len _bb201 args
eq _bb199 _bb201 _bb200
eq _bb197 _bb199 _bb198
if # _bb197 _bb195
IS query ..query
len nsearch search
len nquery query
BEGIN _bb204
BUILTIN _bb205 Bfalse
return # _bb205
END
lt _bb206 nsearch nquery
if # _bb206 _bb204
range _bb207 nquery
iter _bbmacro3 _bb207
BEGIN _bb209
next _bb210 _bbmacro3
AS i _bb210
exists _bb211 i
END
BEGIN _bb212
BEGIN _bb213
BUILTIN _bb214 Bfalse
return # _bb214
END
sub _bb218 nsearch nquery
add _bb217 _bb218 i
at _bb216 search _bb217
at _bb219 query i
neq _bb215 _bb219 _bb216
if # _bb215 _bb213
END
while # _bb209 _bb212
BUILTIN _bb220 Btrue
return # _bb220
END
IS call _bb193
return # this
END
new _bb182 _bb184
return # _bb182
END
IS ends _bb181
final # ends
return # this
END
new string _bb96
final # string
return # this
END
new bb _bb16
final # bb
BEGIN _bb314
BUILTIN _bb315 I1
BUILTIN _bb316 I2
BUILTIN _bb317 I3
BUILTIN _bb318 I4
list A _bb315 _bb316 _bb317 _bb318
BEGIN _bb320
BUILTIN _bb321 "Assertion failed: A[1]==2"
fail # _bb321
END
BUILTIN _bb323 Bfalse
BUILTIN _bb325 I2
BUILTIN _bb327 I1
at _bb326 A _bb327
eq _bb324 _bb326 _bb325
eq _bb322 _bb324 _bb323
if # _bb322 _bb320
BEGIN _bb328
BUILTIN _bb329 "Assertion failed: A|next==1"
fail # _bb329
END
BUILTIN _bb331 Bfalse
BUILTIN _bb333 I1
next _bb334 A
eq _bb332 _bb334 _bb333
eq _bb330 _bb332 _bb331
if # _bb330 _bb328
BEGIN _bb335
BUILTIN _bb336 "Assertion failed: A|next==2"
fail # _bb336
END
BUILTIN _bb338 Bfalse
BUILTIN _bb340 I2
next _bb341 A
eq _bb339 _bb341 _bb340
eq _bb337 _bb339 _bb338
if # _bb337 _bb335
BEGIN _bb342
BUILTIN _bb343 "Assertion failed: A|pop==4"
fail # _bb343
END
BUILTIN _bb345 Bfalse
BUILTIN _bb347 I4
pop _bb348 A
eq _bb346 _bb348 _bb347
eq _bb344 _bb346 _bb345
if # _bb344 _bb342
BEGIN _bb349
BUILTIN _bb350 "Assertion failed: A|pop==3"
fail # _bb350
END
BUILTIN _bb352 Bfalse
BUILTIN _bb354 I3
pop _bb355 A
eq _bb353 _bb355 _bb354
eq _bb351 _bb353 _bb352
if # _bb351 _bb349
BEGIN _bb356
BUILTIN _bb357 "Assertion failed: A|len==0"
fail # _bb357
END
BUILTIN _bb359 Bfalse
BUILTIN _bb361 I0
len _bb362 A
eq _bb360 _bb362 _bb361
eq _bb358 _bb360 _bb359
if # _bb358 _bb356
BUILTIN _bb363 I5
push # A _bb363
BEGIN _bb364
BUILTIN _bb365 "Assertion failed: A|pop==5"
fail # _bb365
END
BUILTIN _bb367 Bfalse
BUILTIN _bb369 I5
pop _bb370 A
eq _bb368 _bb370 _bb369
eq _bb366 _bb368 _bb367
if # _bb366 _bb364
return # #
END
try _bbmacro6 _bb314
BEGIN _bb371
str _bb373 _bbmacro6
BUILTIN _bb375 "\n"
BUILTIN _bb377 "List"
BUILTIN _bb379 " ] "
get _bb382 bb ansi
get _bb381 _bb382 reset
str _bb383 _bb381
BUILTIN _bb385 "fail"
get _bb388 bb ansi
get _bb387 _bb388 red
str _bb389 _bb387
BUILTIN _bb390 "[ "
add _bb386 _bb390 _bb389
add _bb384 _bb386 _bb385
add _bb380 _bb384 _bb383
add _bb378 _bb380 _bb379
add _bb376 _bb378 _bb377
add _bb374 _bb376 _bb375
add _bb372 _bb374 _bb373
print # _bb372
END
BEGIN _bb391
BUILTIN _bb393 "List"
BUILTIN _bb395 "  ] "
get _bb398 bb ansi
get _bb397 _bb398 reset
str _bb399 _bb397
BUILTIN _bb401 "ok"
get _bb404 bb ansi
get _bb403 _bb404 green
str _bb405 _bb403
BUILTIN _bb406 "[  "
add _bb402 _bb406 _bb405
add _bb400 _bb402 _bb401
add _bb396 _bb400 _bb399
add _bb394 _bb396 _bb395
add _bb392 _bb394 _bb393
print # _bb392
END
catch # _bbmacro6 _bb371 _bb391
BEGIN _bb409
BUILTIN s I0
BUILTIN _bb412 I10
range _bb411 _bb412
iter _bbmacro8 _bb411
BEGIN _bb414
next _bb415 _bbmacro8
AS i _bb415
exists _bb416 i
END
BEGIN _bb417
add s s i
END
while # _bb414 _bb417
BEGIN _bb418
BUILTIN _bb419 "Assertion failed: s==45"
fail # _bb419
END
BUILTIN _bb421 Bfalse
BUILTIN _bb423 I45
eq _bb422 s _bb423
eq _bb420 _bb422 _bb421
if # _bb420 _bb418
return # #
END
try _bbmacro7 _bb409
BEGIN _bb424
str _bb426 _bbmacro7
BUILTIN _bb428 "\n"
BUILTIN _bb430 "Range"
BUILTIN _bb432 " ] "
get _bb435 bb ansi
get _bb434 _bb435 reset
str _bb436 _bb434
BUILTIN _bb438 "fail"
get _bb441 bb ansi
get _bb440 _bb441 red
str _bb442 _bb440
BUILTIN _bb443 "[ "
add _bb439 _bb443 _bb442
add _bb437 _bb439 _bb438
add _bb433 _bb437 _bb436
add _bb431 _bb433 _bb432
add _bb429 _bb431 _bb430
add _bb427 _bb429 _bb428
add _bb425 _bb427 _bb426
print # _bb425
END
BEGIN _bb444
BUILTIN _bb446 "Range"
BUILTIN _bb448 "  ] "
get _bb451 bb ansi
get _bb450 _bb451 reset
str _bb452 _bb450
BUILTIN _bb454 "ok"
get _bb457 bb ansi
get _bb456 _bb457 green
str _bb458 _bb456
BUILTIN _bb459 "[  "
add _bb455 _bb459 _bb458
add _bb453 _bb455 _bb454
add _bb449 _bb453 _bb452
add _bb447 _bb449 _bb448
add _bb445 _bb447 _bb446
print # _bb445
END
catch # _bbmacro7 _bb424 _bb444
BEGIN _bb462
BUILTIN _bb463 I1
BUILTIN _bb464 I2
BUILTIN _bb465 I3
list A _bb463 _bb464 _bb465
BUILTIN s I0
iter _bbmacro10 A
BEGIN _bb469
next _bb470 _bbmacro10
AS x _bb470
exists _bb471 x
END
BEGIN _bb472
add s s x
END
while # _bb469 _bb472
iter it A
BEGIN _bb474
next _bb475 it
AS x _bb475
exists _bb476 x
END
BEGIN _bb477
sub s s x
END
while # _bb474 _bb477
BEGIN _bb478
BUILTIN _bb479 "Assertion failed: s==0"
fail # _bb479
END
BUILTIN _bb481 Bfalse
BUILTIN _bb483 I0
eq _bb482 s _bb483
eq _bb480 _bb482 _bb481
if # _bb480 _bb478
return # #
END
try _bbmacro9 _bb462
BEGIN _bb484
str _bb486 _bbmacro9
BUILTIN _bb488 "\n"
BUILTIN _bb490 "Iteration"
BUILTIN _bb492 " ] "
get _bb495 bb ansi
get _bb494 _bb495 reset
str _bb496 _bb494
BUILTIN _bb498 "fail"
get _bb501 bb ansi
get _bb500 _bb501 red
str _bb502 _bb500
BUILTIN _bb503 "[ "
add _bb499 _bb503 _bb502
add _bb497 _bb499 _bb498
add _bb493 _bb497 _bb496
add _bb491 _bb493 _bb492
add _bb489 _bb491 _bb490
add _bb487 _bb489 _bb488
add _bb485 _bb487 _bb486
print # _bb485
END
BEGIN _bb504
BUILTIN _bb506 "Iteration"
BUILTIN _bb508 "  ] "
get _bb511 bb ansi
get _bb510 _bb511 reset
str _bb512 _bb510
BUILTIN _bb514 "ok"
get _bb517 bb ansi
get _bb516 _bb517 green
str _bb518 _bb516
BUILTIN _bb519 "[  "
add _bb515 _bb519 _bb518
add _bb513 _bb515 _bb514
add _bb509 _bb513 _bb512
add _bb507 _bb509 _bb508
add _bb505 _bb507 _bb506
print # _bb505
END
catch # _bbmacro9 _bb484 _bb504
BEGIN _bb522
BEGIN _bb523
get _bb524 this x
IS .x _bb524
BUILTIN x I0
BEGIN _bb526
get _bb527 this x
return # _bb527
END
IS xthis _bb526
BEGIN _bb528
get _bb529 this .x
IS ..x _bb529
return # ..x
END
IS xclosure _bb528
END
IS Struct _bb523
BUILTIN x I1
BEGIN _bb533
inline _bb534 Struct
return # this
END
new struct _bb533
BUILTIN x I2
BEGIN _bb536
BUILTIN _bb537 "Assertion failed: struct.xthis()==0"
fail # _bb537
END
BUILTIN _bb539 Bfalse
BUILTIN _bb541 I0
get _bb543 struct xthis
call _bb542 # _bb543
eq _bb540 _bb542 _bb541
eq _bb538 _bb540 _bb539
if # _bb538 _bb536
BEGIN _bb544
BUILTIN _bb545 "Assertion failed: struct.xclosure()==1"
fail # _bb545
END
BUILTIN _bb547 Bfalse
BUILTIN _bb549 I1
get _bb551 struct xclosure
call _bb550 # _bb551
eq _bb548 _bb550 _bb549
eq _bb546 _bb548 _bb547
if # _bb546 _bb544
return # #
END
try _bbmacro11 _bb522
BEGIN _bb552
str _bb554 _bbmacro11
BUILTIN _bb556 "\n"
BUILTIN _bb558 "Closure"
BUILTIN _bb560 " ] "
get _bb563 bb ansi
get _bb562 _bb563 reset
str _bb564 _bb562
BUILTIN _bb566 "fail"
get _bb569 bb ansi
get _bb568 _bb569 red
str _bb570 _bb568
BUILTIN _bb571 "[ "
add _bb567 _bb571 _bb570
add _bb565 _bb567 _bb566
add _bb561 _bb565 _bb564
add _bb559 _bb561 _bb560
add _bb557 _bb559 _bb558
add _bb555 _bb557 _bb556
add _bb553 _bb555 _bb554
print # _bb553
END
BEGIN _bb572
BUILTIN _bb574 "Closure"
BUILTIN _bb576 "  ] "
get _bb579 bb ansi
get _bb578 _bb579 reset
str _bb580 _bb578
BUILTIN _bb582 "ok"
get _bb585 bb ansi
get _bb584 _bb585 green
str _bb586 _bb584
BUILTIN _bb587 "[  "
add _bb583 _bb587 _bb586
add _bb581 _bb583 _bb582
add _bb577 _bb581 _bb580
add _bb575 _bb577 _bb576
add _bb573 _bb575 _bb574
print # _bb573
END
catch # _bbmacro11 _bb552 _bb572
BEGIN _bb590
BUILTIN _bb591 I1
BUILTIN _bb592 I2
BUILTIN _bb593 I3
list A _bb591 _bb592 _bb593
BEGIN _bb596
list args A
END
BEGIN _bb599
BUILTIN _bb600 I4
list args _bb600
END
get _bb602 bb collection
get _bb601 _bb602 toback
call _bb598 _bb599 _bb601
call _bb595 _bb596 _bb598
IS A _bb595
BEGIN _bb603
BUILTIN _bb604 "Assertion failed: A|pop==4"
fail # _bb604
END
BUILTIN _bb606 Bfalse
BUILTIN _bb608 I4
pop _bb609 A
eq _bb607 _bb609 _bb608
eq _bb605 _bb607 _bb606
if # _bb605 _bb603
return # #
END
try _bbmacro12 _bb590
BEGIN _bb610
str _bb612 _bbmacro12
BUILTIN _bb614 "\n"
BUILTIN _bb616 "Collection"
BUILTIN _bb618 " ] "
get _bb621 bb ansi
get _bb620 _bb621 reset
str _bb622 _bb620
BUILTIN _bb624 "fail"
get _bb627 bb ansi
get _bb626 _bb627 red
str _bb628 _bb626
BUILTIN _bb629 "[ "
add _bb625 _bb629 _bb628
add _bb623 _bb625 _bb624
add _bb619 _bb623 _bb622
add _bb617 _bb619 _bb618
add _bb615 _bb617 _bb616
add _bb613 _bb615 _bb614
add _bb611 _bb613 _bb612
print # _bb611
END
BEGIN _bb630
BUILTIN _bb632 "Collection"
BUILTIN _bb634 "  ] "
get _bb637 bb ansi
get _bb636 _bb637 reset
str _bb638 _bb636
BUILTIN _bb640 "ok"
get _bb643 bb ansi
get _bb642 _bb643 green
str _bb644 _bb642
BUILTIN _bb645 "[  "
add _bb641 _bb645 _bb644
add _bb639 _bb641 _bb640
add _bb635 _bb639 _bb638
add _bb633 _bb635 _bb634
add _bb631 _bb633 _bb632
print # _bb631
END
catch # _bbmacro12 _bb610 _bb630
BEGIN _bb648
BUILTIN A "I like banana!"
BEGIN _bb650
BUILTIN _bb651 "Assertion failed: A|bb.string.starts(I like)"
fail # _bb651
END
BUILTIN _bb653 Bfalse
BEGIN _bb655
list args A
END
BEGIN _bb658
BUILTIN _bb659 "I like"
list args _bb659
END
get _bb661 bb string
get _bb660 _bb661 starts
call _bb657 _bb658 _bb660
call _bb654 _bb655 _bb657
eq _bb652 _bb654 _bb653
if # _bb652 _bb650
BEGIN _bb662
BUILTIN _bb663 "Assertion failed: A|bb.string.ends(banana!)"
fail # _bb663
END
BUILTIN _bb665 Bfalse
BEGIN _bb667
list args A
END
BEGIN _bb670
BUILTIN _bb671 "banana!"
list args _bb671
END
get _bb673 bb string
get _bb672 _bb673 ends
call _bb669 _bb670 _bb672
call _bb666 _bb667 _bb669
eq _bb664 _bb666 _bb665
if # _bb664 _bb662
return # #
END
try _bbmacro13 _bb648
BEGIN _bb674
str _bb676 _bbmacro13
BUILTIN _bb678 "\n"
BUILTIN _bb680 "String"
BUILTIN _bb682 " ] "
get _bb685 bb ansi
get _bb684 _bb685 reset
str _bb686 _bb684
BUILTIN _bb688 "fail"
get _bb691 bb ansi
get _bb690 _bb691 red
str _bb692 _bb690
BUILTIN _bb693 "[ "
add _bb689 _bb693 _bb692
add _bb687 _bb689 _bb688
add _bb683 _bb687 _bb686
add _bb681 _bb683 _bb682
add _bb679 _bb681 _bb680
add _bb677 _bb679 _bb678
add _bb675 _bb677 _bb676
print # _bb675
END
BEGIN _bb694
BUILTIN _bb696 "String"
BUILTIN _bb698 "  ] "
get _bb701 bb ansi
get _bb700 _bb701 reset
str _bb702 _bb700
BUILTIN _bb704 "ok"
get _bb707 bb ansi
get _bb706 _bb707 green
str _bb708 _bb706
BUILTIN _bb709 "[  "
add _bb705 _bb709 _bb708
add _bb703 _bb705 _bb704
add _bb699 _bb703 _bb702
add _bb697 _bb699 _bb698
add _bb695 _bb697 _bb696
print # _bb695
END
catch # _bbmacro13 _bb674 _bb694
