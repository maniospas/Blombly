BEGIN _bb30
BEGIN _bb33
BUILTIN lightred "\e[0;91m"
final # lightred
BUILTIN lightgreen "\e[0;92m"
final # lightgreen
BUILTIN reset "\e[0m"
final # reset
return # this
END
new ansi _bb33
final # ansi
BEGIN _bb53
BEGIN _bb54
next element args
BEGIN _bb57
get _bb58 this element
IS .element _bb58
BEGIN _bb59
next A args
get _bb60 this .element
IS ..element _bb60
push _bb61 A ..element
return # A
END
IS call _bb59
return # this
END
new _bb55 _bb57
return # _bb55
END
IS toback _bb54
final # toback
BEGIN _bb62
next func args
BEGIN _bb65
get _bb66 this func
IS .func _bb66
BEGIN _bb67
next A args
get _bb68 this .func
IS ..func _bb68
list ret
iter _bbmacro0 A
BEGIN _bb71
next _bb72 _bbmacro0
AS x _bb72
exists _bb73 x
END
BEGIN _bb74
BEGIN _bb77
list args x
END
call _bb76 _bb77 ..func
push _bb75 ret _bb76
END
while # _bb71 _bb74
return # ret
END
IS call _bb67
return # this
END
new _bb63 _bb65
return # _bb63
END
IS transform _bb62
final # transform
return # this
END
new collection _bb53
final # collection
BEGIN _bb78
next path args
str path path
BEGIN _bb81
sqlite connector path
return # this
END
new _bb79 _bb81
return # _bb79
END
IS db _bb78
final # db
BEGIN _bb194
BEGIN _bb195
next text args
str text text
BUILTIN _bb197 ""
str _bb199 text
BUILTIN _bb201 "  ] "
get _bb204 bb ansi
get _bb203 _bb204 reset
str _bb205 _bb203
BUILTIN _bb207 "ok"
get _bb210 bb ansi
get _bb209 _bb210 lightgreen
str _bb211 _bb209
BUILTIN _bb212 "[  "
add _bb208 _bb212 _bb211
add _bb206 _bb208 _bb207
add _bb202 _bb206 _bb205
add _bb200 _bb202 _bb201
add _bb198 _bb200 _bb199
add _bb196 _bb198 _bb197
print # _bb196
END
IS ok _bb195
final # ok
BEGIN _bb213
next text args
str text text
BUILTIN _bb215 ""
str _bb217 text
BUILTIN _bb219 " ] "
get _bb222 bb ansi
get _bb221 _bb222 reset
str _bb223 _bb221
BUILTIN _bb225 "fail"
get _bb228 bb ansi
get _bb227 _bb228 lightred
str _bb229 _bb227
BUILTIN _bb230 "[ "
add _bb226 _bb230 _bb229
add _bb224 _bb226 _bb225
add _bb220 _bb224 _bb223
add _bb218 _bb220 _bb219
add _bb216 _bb218 _bb217
add _bb214 _bb216 _bb215
print # _bb214
END
IS fail _bb213
final # fail
return # this
END
new logger _bb194
final # logger
BEGIN _bb287
BEGIN _bb288
next path args
str path path
file path path
return # path
END
IS call _bb288
BEGIN _bb296
next path args
str path path
file path path
BUILTIN ret ""
iter _bbmacro2 path
BEGIN _bb299
next _bb300 _bbmacro2
AS line _bb300
exists _bb301 line
END
BEGIN _bb302
BEGIN _bb303
BUILTIN _bb304 "\n"
add ret ret _bb304
END
len _bb306 ret
bool _bb305 _bb306
if # _bb305 _bb303
add ret ret line
END
while # _bb299 _bb302
return # ret
END
IS read _bb296
final # read
return # this
END
new os _bb287
final # os
BEGIN _bb356
BEGIN _bb357
next value args
str value value
return # value
END
IS call _bb357
BEGIN _bb420
next query args
str query query
BEGIN _bb423
get _bb424 this query
IS .query _bb424
BEGIN _bb425
BUILTIN _bb426 "Assertion failed"
fail # _bb426
END
BUILTIN _bb428 Bfalse
BUILTIN _bb430 I0
len _bb431 args
eq _bb429 _bb431 _bb430
eq _bb427 _bb429 _bb428
if # _bb427 _bb425
BEGIN _bb432
next search args
str search search
get _bb433 this .query
IS ..query _bb433
BEGIN _bb434
BUILTIN _bb435 "Assertion failed"
fail # _bb435
END
BUILTIN _bb437 Bfalse
BUILTIN _bb439 I0
len _bb440 args
eq _bb438 _bb440 _bb439
eq _bb436 _bb438 _bb437
if # _bb436 _bb434
IS query ..query
len nsearch search
len nquery query
BEGIN _bb443
BUILTIN _bb444 Bfalse
return # _bb444
END
lt _bb445 nsearch nquery
if # _bb445 _bb443
range _bb446 nquery
iter _bbmacro4 _bb446
BEGIN _bb448
next _bb449 _bbmacro4
AS i _bb449
exists _bb450 i
END
BEGIN _bb451
BEGIN _bb452
BUILTIN _bb453 Bfalse
return # _bb453
END
at _bb455 search i
at _bb456 query i
neq _bb454 _bb456 _bb455
if # _bb454 _bb452
END
while # _bb448 _bb451
BUILTIN _bb457 Btrue
return # _bb457
END
IS call _bb432
return # this
END
new _bb421 _bb423
return # _bb421
END
IS starts _bb420
final # starts
BEGIN _bb458
next query args
str query query
BEGIN _bb461
get _bb462 this query
IS .query _bb462
BEGIN _bb463
BUILTIN _bb464 "Assertion failed"
fail # _bb464
END
BUILTIN _bb466 Bfalse
BUILTIN _bb468 I0
len _bb469 args
eq _bb467 _bb469 _bb468
eq _bb465 _bb467 _bb466
if # _bb465 _bb463
BEGIN _bb470
next search args
str search search
get _bb471 this .query
IS ..query _bb471
BEGIN _bb472
BUILTIN _bb473 "Assertion failed"
fail # _bb473
END
BUILTIN _bb475 Bfalse
BUILTIN _bb477 I0
len _bb478 args
eq _bb476 _bb478 _bb477
eq _bb474 _bb476 _bb475
if # _bb474 _bb472
IS query ..query
len nsearch search
len nquery query
BEGIN _bb481
BUILTIN _bb482 Bfalse
return # _bb482
END
lt _bb483 nsearch nquery
if # _bb483 _bb481
range _bb484 nquery
iter _bbmacro5 _bb484
BEGIN _bb486
next _bb487 _bbmacro5
AS i _bb487
exists _bb488 i
END
BEGIN _bb489
BEGIN _bb490
BUILTIN _bb491 Bfalse
return # _bb491
END
sub _bb495 nsearch nquery
add _bb494 _bb495 i
at _bb493 search _bb494
at _bb496 query i
neq _bb492 _bb496 _bb493
if # _bb492 _bb490
END
while # _bb486 _bb489
BUILTIN _bb497 Btrue
return # _bb497
END
IS call _bb470
return # this
END
new _bb459 _bb461
return # _bb459
END
IS ends _bb458
final # ends
BEGIN _bb498
next query args
str query query
BEGIN _bb501
get _bb502 this query
IS .query _bb502
BEGIN _bb503
BUILTIN _bb504 "Assertion failed"
fail # _bb504
END
BUILTIN _bb506 Bfalse
BUILTIN _bb508 I0
len _bb509 args
eq _bb507 _bb509 _bb508
eq _bb505 _bb507 _bb506
if # _bb505 _bb503
BEGIN _bb510
BUILTIN pos I0
END
BEGIN _bb514
IS pos pos
return # #
END
try _bb512 _bb514
catch # _bb512 _bb510
BEGIN _bb515
next search args
str search search
get _bb516 this .query
IS ..query _bb516
BEGIN _bb517
BUILTIN _bb518 "Assertion failed"
fail # _bb518
END
BUILTIN _bb520 Bfalse
BUILTIN _bb522 I0
len _bb523 args
eq _bb521 _bb523 _bb522
eq _bb519 _bb521 _bb520
if # _bb519 _bb517
IS query ..query
get _bb524 this pos
IS pos _bb524
len nsearch search
len nquery query
BUILTIN _bb529 I1
sub _bb530 nsearch nquery
add _bb528 _bb530 _bb529
range _bb527 pos _bb528
iter _bbmacro6 _bb527
BEGIN _bb532
next _bb533 _bbmacro6
AS i _bb533
exists _bb534 i
END
BEGIN _bb535
range _bb536 nquery
iter _bbmacro7 _bb536
BEGIN _bb540
BEGIN _bb541
next _bb542 _bbmacro7
AS j _bb542
exists _bb543 j
END
BEGIN _bb544
BEGIN _bb545
BUILTIN _bb546 Btrue
return # _bb546
END
add _bb549 i j
at _bb548 search _bb549
at _bb550 query j
neq _bb547 _bb550 _bb548
if # _bb547 _bb545
END
while # _bb541 _bb544
END
try different _bb540
BEGIN _bb551
return # i
END
catch # different _bb551
END
while # _bb532 _bb535
return # nsearch
END
IS call _bb515
return # this
END
new _bb499 _bb501
return # _bb499
END
IS index _bb498
final # index
BEGIN _bb552
next query args
str query query
BEGIN _bb555
get _bb556 this query
IS .query _bb556
BEGIN _bb557
BUILTIN _bb558 "Assertion failed"
fail # _bb558
END
BUILTIN _bb560 Bfalse
BUILTIN _bb562 I0
len _bb563 args
eq _bb561 _bb563 _bb562
eq _bb559 _bb561 _bb560
if # _bb559 _bb557
BEGIN _bb565
END
default # _bb565
BEGIN _bb567
next search args
str search search
get _bb568 this .query
IS ..query _bb568
IS query ..query
len nsearch search
len nquery query
BEGIN _bb571
BUILTIN _bb572 "Cannot split on a zero-length string"
fail # _bb572
END
BUILTIN _bb574 I0
eq _bb573 nquery _bb574
if # _bb573 _bb571
list ret
BUILTIN pos I0
BEGIN _bb577
lt _bb578 pos nsearch
END
BEGIN _bb579
IS prev_pos pos
BEGIN _bb581
list args search
END
BEGIN _bb584
list args query
IS pos pos
END
get _bb586 bb string
get _bb585 _bb586 index
call _bb583 _bb584 _bb585
call _bb580 _bb581 _bb583
IS pos _bb580
range _bb588 prev_pos pos
at _bb587 search _bb588
IS s _bb587
push _bb589 ret s
add pos pos nquery
END
while # _bb577 _bb579
return # ret
END
IS call _bb567
return # this
END
new _bb553 _bb555
return # _bb553
END
IS split _bb552
final # split
return # this
END
new string _bb356
final # string
return # this
END
new bb _bb30
final # bb
BEGIN _bb592
BUILTIN A "0"
BUILTIN _bb594 "1"
add A A _bb594
BUILTIN _bb595 "2"
add A A _bb595
BUILTIN _bb596 "3"
add A A _bb596
BUILTIN _bb597 "4"
add A A _bb597
BUILTIN _bb598 "5"
add A A _bb598
BUILTIN _bb599 "6"
add A A _bb599
BUILTIN _bb600 "7"
add A A _bb600
BUILTIN _bb601 "8"
add A A _bb601
BUILTIN _bb602 "9"
add A A _bb602
BEGIN _bb603
BUILTIN _bb604 "Assertion failed"
fail # _bb604
END
BUILTIN _bb606 Bfalse
BUILTIN _bb608 "0123456789"
eq _bb607 A _bb608
eq _bb605 _bb607 _bb606
if # _bb605 _bb603
BEGIN _bb609
BUILTIN _bb610 "Assertion failed"
fail # _bb610
END
BUILTIN _bb612 Bfalse
BUILTIN _bb614 I10
len _bb615 A
eq _bb613 _bb615 _bb614
eq _bb611 _bb613 _bb612
if # _bb611 _bb609
return # #
END
try _bbmacro8 _bb592
BEGIN _bb616
BEGIN _bb618
str _bb620 _bbmacro8
BUILTIN _bb622 "\n"
BUILTIN _bb623 "String add"
add _bb621 _bb623 _bb622
add _bb619 _bb621 _bb620
list args _bb619
END
get _bb625 bb logger
get _bb624 _bb625 fail
call _bb617 _bb618 _bb624
END
BEGIN _bb626
BEGIN _bb628
BUILTIN _bb629 "String add"
list args _bb629
END
get _bb631 bb logger
get _bb630 _bb631 ok
call _bb627 _bb628 _bb630
END
catch # _bbmacro8 _bb616 _bb626
BEGIN _bb634
BUILTIN _bb635 I1
BUILTIN _bb636 I2
BUILTIN _bb637 I3
BUILTIN _bb638 I4
list A _bb635 _bb636 _bb637 _bb638
BEGIN _bb640
BUILTIN _bb641 "Assertion failed"
fail # _bb641
END
BUILTIN _bb643 Bfalse
BUILTIN _bb645 I2
BUILTIN _bb647 I1
at _bb646 A _bb647
eq _bb644 _bb646 _bb645
eq _bb642 _bb644 _bb643
if # _bb642 _bb640
BEGIN _bb648
BUILTIN _bb649 "Assertion failed"
fail # _bb649
END
BUILTIN _bb651 Bfalse
BUILTIN _bb653 I1
next _bb654 A
eq _bb652 _bb654 _bb653
eq _bb650 _bb652 _bb651
if # _bb650 _bb648
BEGIN _bb655
BUILTIN _bb656 "Assertion failed"
fail # _bb656
END
BUILTIN _bb658 Bfalse
BUILTIN _bb660 I2
next _bb661 A
eq _bb659 _bb661 _bb660
eq _bb657 _bb659 _bb658
if # _bb657 _bb655
BEGIN _bb662
BUILTIN _bb663 "Assertion failed"
fail # _bb663
END
BUILTIN _bb665 Bfalse
BUILTIN _bb667 I4
pop _bb668 A
eq _bb666 _bb668 _bb667
eq _bb664 _bb666 _bb665
if # _bb664 _bb662
BEGIN _bb669
BUILTIN _bb670 "Assertion failed"
fail # _bb670
END
BUILTIN _bb672 Bfalse
BUILTIN _bb674 I3
pop _bb675 A
eq _bb673 _bb675 _bb674
eq _bb671 _bb673 _bb672
if # _bb671 _bb669
BEGIN _bb676
BUILTIN _bb677 "Assertion failed"
fail # _bb677
END
BUILTIN _bb679 Bfalse
BUILTIN _bb681 I0
len _bb682 A
eq _bb680 _bb682 _bb681
eq _bb678 _bb680 _bb679
if # _bb678 _bb676
BUILTIN _bb683 I5
push # A _bb683
BEGIN _bb684
BUILTIN _bb685 "Assertion failed"
fail # _bb685
END
BUILTIN _bb687 Bfalse
BUILTIN _bb689 I5
pop _bb690 A
eq _bb688 _bb690 _bb689
eq _bb686 _bb688 _bb687
if # _bb686 _bb684
return # #
END
try _bbmacro9 _bb634
BEGIN _bb691
BEGIN _bb693
str _bb695 _bbmacro9
BUILTIN _bb697 "\n"
BUILTIN _bb698 "List"
add _bb696 _bb698 _bb697
add _bb694 _bb696 _bb695
list args _bb694
END
get _bb700 bb logger
get _bb699 _bb700 fail
call _bb692 _bb693 _bb699
END
BEGIN _bb701
BEGIN _bb703
BUILTIN _bb704 "List"
list args _bb704
END
get _bb706 bb logger
get _bb705 _bb706 ok
call _bb702 _bb703 _bb705
END
catch # _bbmacro9 _bb691 _bb701
BEGIN _bb709
BUILTIN s I0
BUILTIN _bb712 I10
range _bb711 _bb712
iter _bbmacro11 _bb711
BEGIN _bb714
next _bb715 _bbmacro11
AS i _bb715
exists _bb716 i
END
BEGIN _bb717
add s s i
END
while # _bb714 _bb717
BEGIN _bb718
BUILTIN _bb719 "Assertion failed"
fail # _bb719
END
BUILTIN _bb721 Bfalse
BUILTIN _bb723 I45
eq _bb722 s _bb723
eq _bb720 _bb722 _bb721
if # _bb720 _bb718
return # #
END
try _bbmacro10 _bb709
BEGIN _bb724
BEGIN _bb726
str _bb728 _bbmacro10
BUILTIN _bb730 "\n"
BUILTIN _bb731 "Range"
add _bb729 _bb731 _bb730
add _bb727 _bb729 _bb728
list args _bb727
END
get _bb733 bb logger
get _bb732 _bb733 fail
call _bb725 _bb726 _bb732
END
BEGIN _bb734
BEGIN _bb736
BUILTIN _bb737 "Range"
list args _bb737
END
get _bb739 bb logger
get _bb738 _bb739 ok
call _bb735 _bb736 _bb738
END
catch # _bbmacro10 _bb724 _bb734
BEGIN _bb742
BUILTIN _bb743 I1
BUILTIN _bb744 I2
BUILTIN _bb745 I3
list A _bb743 _bb744 _bb745
BUILTIN s I0
iter _bbmacro13 A
BEGIN _bb749
next _bb750 _bbmacro13
AS x _bb750
exists _bb751 x
END
BEGIN _bb752
add s s x
END
while # _bb749 _bb752
iter it A
BEGIN _bb754
next _bb755 it
AS x _bb755
exists _bb756 x
END
BEGIN _bb757
sub s s x
END
while # _bb754 _bb757
BEGIN _bb758
BUILTIN _bb759 "Assertion failed"
fail # _bb759
END
BUILTIN _bb761 Bfalse
BUILTIN _bb763 I0
eq _bb762 s _bb763
eq _bb760 _bb762 _bb761
if # _bb760 _bb758
return # #
END
try _bbmacro12 _bb742
BEGIN _bb764
BEGIN _bb766
str _bb768 _bbmacro12
BUILTIN _bb770 "\n"
BUILTIN _bb771 "Iteration"
add _bb769 _bb771 _bb770
add _bb767 _bb769 _bb768
list args _bb767
END
get _bb773 bb logger
get _bb772 _bb773 fail
call _bb765 _bb766 _bb772
END
BEGIN _bb774
BEGIN _bb776
BUILTIN _bb777 "Iteration"
list args _bb777
END
get _bb779 bb logger
get _bb778 _bb779 ok
call _bb775 _bb776 _bb778
END
catch # _bbmacro12 _bb764 _bb774
BEGIN _bb782
BEGIN _bb783
BEGIN _bb784
get _bb785 this value
return # _bb785
END
IS int _bb784
BEGIN _bb786
next other args
get _bb788 other value
get _bb789 this value
lt _bb787 _bb789 _bb788
return # _bb787
END
IS lt _bb786
BEGIN _bb790
BUILTIN _bb792 ""
get _bb794 this value
str _bb795 _bb794
BUILTIN _bb796 "num "
add _bb793 _bb796 _bb795
add _bb791 _bb793 _bb792
return # _bb791
END
IS str _bb790
END
IS Num _bb783
final # Num
BEGIN _bb797
next x args
BEGIN _bb800
inline _bb801 Num
IS value x
return # this
END
new _bb798 _bb800
return # _bb798
END
IS num _bb797
BUILTIN _bb802 I5
BUILTIN _bb803 I2
BUILTIN _bb804 I3
BUILTIN _bb805 I4
BUILTIN _bb806 I1
list A _bb802 _bb803 _bb804 _bb805 _bb806
BEGIN _bb809
list args A
END
BEGIN _bb812
list args num
END
get _bb814 bb collection
get _bb813 _bb814 transform
call _bb811 _bb812 _bb813
call _bb808 _bb809 _bb811
IS A _bb808
len n A
range _bb816 n
iter _bbmacro15 _bb816
BEGIN _bb818
next _bb819 _bbmacro15
AS i _bb819
exists _bb820 i
END
BEGIN _bb821
BUILTIN _bb824 I1
add _bb823 i _bb824
range _bb822 _bb823 n
iter _bbmacro16 _bb822
BEGIN _bb826
next _bb827 _bbmacro16
AS j _bb827
exists _bb828 j
END
BEGIN _bb829
BEGIN _bb830
at _bb831 A i
IS tmp _bb831
at _bb832 A j
put # A i _bb832
put # A j tmp
END
at _bb834 A i
at _bb835 A j
lt _bb833 _bb835 _bb834
if # _bb833 _bb830
END
while # _bb826 _bb829
END
while # _bb818 _bb821
BEGIN _bb836
BUILTIN _bb837 "Assertion failed"
fail # _bb837
END
BUILTIN _bb839 Bfalse
BUILTIN _bb841 I1
BUILTIN _bb844 I0
at _bb843 A _bb844
int _bb842 _bb843
eq _bb840 _bb842 _bb841
eq _bb838 _bb840 _bb839
if # _bb838 _bb836
return # #
END
try _bbmacro14 _bb782
BEGIN _bb845
BEGIN _bb847
str _bb849 _bbmacro14
BUILTIN _bb851 "\n"
BUILTIN _bb852 "Overload"
add _bb850 _bb852 _bb851
add _bb848 _bb850 _bb849
list args _bb848
END
get _bb854 bb logger
get _bb853 _bb854 fail
call _bb846 _bb847 _bb853
END
BEGIN _bb855
BEGIN _bb857
BUILTIN _bb858 "Overload"
list args _bb858
END
get _bb860 bb logger
get _bb859 _bb860 ok
call _bb856 _bb857 _bb859
END
catch # _bbmacro14 _bb845 _bb855
BEGIN _bb863
BEGIN _bb864
get _bb865 this x
IS .x _bb865
BUILTIN x I0
BEGIN _bb867
get _bb868 this x
return # _bb868
END
IS xthis _bb867
BEGIN _bb869
get _bb870 this .x
IS ..x _bb870
return # ..x
END
IS xclosure _bb869
END
IS Struct _bb864
BUILTIN x I1
BEGIN _bb874
inline _bb875 Struct
return # this
END
new struct _bb874
BUILTIN x I2
BEGIN _bb877
BUILTIN _bb878 "Assertion failed"
fail # _bb878
END
BUILTIN _bb880 Bfalse
BUILTIN _bb882 I0
get _bb884 struct xthis
call _bb883 # _bb884
eq _bb881 _bb883 _bb882
eq _bb879 _bb881 _bb880
if # _bb879 _bb877
BEGIN _bb885
BUILTIN _bb886 "Assertion failed"
fail # _bb886
END
BUILTIN _bb888 Bfalse
BUILTIN _bb890 I1
get _bb892 struct xclosure
call _bb891 # _bb892
eq _bb889 _bb891 _bb890
eq _bb887 _bb889 _bb888
if # _bb887 _bb885
return # #
END
try _bbmacro17 _bb863
BEGIN _bb893
BEGIN _bb895
str _bb897 _bbmacro17
BUILTIN _bb899 "\n"
BUILTIN _bb900 "Closure"
add _bb898 _bb900 _bb899
add _bb896 _bb898 _bb897
list args _bb896
END
get _bb902 bb logger
get _bb901 _bb902 fail
call _bb894 _bb895 _bb901
END
BEGIN _bb903
BEGIN _bb905
BUILTIN _bb906 "Closure"
list args _bb906
END
get _bb908 bb logger
get _bb907 _bb908 ok
call _bb904 _bb905 _bb907
END
catch # _bbmacro17 _bb893 _bb903
BEGIN _bb911
BEGIN _bb914
BUILTIN x I1
return # this
END
new A _bb914
BEGIN _bb917
BUILTIN _bb918 "Assertion failed"
fail # _bb918
END
BUILTIN _bb920 Bfalse
BUILTIN _bb922 I1
get _bb923 A x
eq _bb921 _bb923 _bb922
eq _bb919 _bb921 _bb920
if # _bb919 _bb917
clear # A
BEGIN _bb927
get _bb928 A x
print # _bb928
END
try err _bb927
BEGIN _bb929
BUILTIN _bb930 "Assertion failed"
fail # _bb930
END
BUILTIN _bb932 Bfalse
BEGIN _bb935
BEGIN _bb936
BUILTIN _bb937 Btrue
return # _bb937
END
BEGIN _bb938
BUILTIN _bb939 Bfalse
return # _bb939
END
catch # err _bb936 _bb938
END
try _bb933 _bb935
eq _bb931 _bb933 _bb932
if # _bb931 _bb929
BEGIN _bb942
BUILTIN x I1
return # this
END
new B _bb942
move C B
BEGIN _bb948
get _bb949 B x
print # _bb949
END
try err _bb948
BEGIN _bb950
BUILTIN _bb951 "Assertion failed"
fail # _bb951
END
BUILTIN _bb953 Bfalse
BEGIN _bb956
BEGIN _bb957
BUILTIN _bb958 Btrue
return # _bb958
END
BEGIN _bb959
BUILTIN _bb960 Bfalse
return # _bb960
END
catch # err _bb957 _bb959
END
try _bb954 _bb956
eq _bb952 _bb954 _bb953
if # _bb952 _bb950
BEGIN _bb961
BUILTIN _bb962 "Assertion failed"
fail # _bb962
END
BUILTIN _bb964 Bfalse
BUILTIN _bb966 I1
get _bb967 C x
eq _bb965 _bb967 _bb966
eq _bb963 _bb965 _bb964
if # _bb963 _bb961
return # #
END
try _bbmacro18 _bb911
BEGIN _bb968
BEGIN _bb970
str _bb972 _bbmacro18
BUILTIN _bb974 "\n"
BUILTIN _bb975 "Clear"
add _bb973 _bb975 _bb974
add _bb971 _bb973 _bb972
list args _bb971
END
get _bb977 bb logger
get _bb976 _bb977 fail
call _bb969 _bb970 _bb976
END
BEGIN _bb978
BEGIN _bb980
BUILTIN _bb981 "Clear"
list args _bb981
END
get _bb983 bb logger
get _bb982 _bb983 ok
call _bb979 _bb980 _bb982
END
catch # _bbmacro18 _bb968 _bb978
BEGIN _bb986
BEGIN _bb987
next A args
move A A
len _bb988 A
return # _bb988
END
IS waslength _bb987
BUILTIN _bb989 I1
BUILTIN _bb990 I2
BUILTIN _bb991 I3
list A _bb989 _bb990 _bb991
BEGIN _bb993
BUILTIN _bb994 "Assertion failed"
fail # _bb994
END
BUILTIN _bb996 Bfalse
BUILTIN _bb998 I3
len _bb999 A
eq _bb997 _bb999 _bb998
eq _bb995 _bb997 _bb996
if # _bb995 _bb993
BEGIN _bb1000
BUILTIN _bb1001 "Assertion failed"
fail # _bb1001
END
BUILTIN _bb1003 Bfalse
BUILTIN _bb1005 I3
BEGIN _bb1007
list args A
END
call _bb1006 _bb1007 waslength
eq _bb1004 _bb1006 _bb1005
eq _bb1002 _bb1004 _bb1003
if # _bb1002 _bb1000
BEGIN _bb1008
BUILTIN _bb1009 "Assertion failed"
fail # _bb1009
END
BUILTIN _bb1011 Bfalse
BUILTIN _bb1013 I0
len _bb1014 A
eq _bb1012 _bb1014 _bb1013
eq _bb1010 _bb1012 _bb1011
if # _bb1010 _bb1008
return # #
END
try _bbmacro19 _bb986
BEGIN _bb1015
BEGIN _bb1017
str _bb1019 _bbmacro19
BUILTIN _bb1021 "\n"
BUILTIN _bb1022 "Move "
add _bb1020 _bb1022 _bb1021
add _bb1018 _bb1020 _bb1019
list args _bb1018
END
get _bb1024 bb logger
get _bb1023 _bb1024 fail
call _bb1016 _bb1017 _bb1023
END
BEGIN _bb1025
BEGIN _bb1027
BUILTIN _bb1028 "Move "
list args _bb1028
END
get _bb1030 bb logger
get _bb1029 _bb1030 ok
call _bb1026 _bb1027 _bb1029
END
catch # _bbmacro19 _bb1015 _bb1025
BEGIN _bb1033
BUILTIN _bb1034 I1
BUILTIN _bb1035 I2
BUILTIN _bb1036 I3
list A _bb1034 _bb1035 _bb1036
BEGIN _bb1039
list args A
END
BEGIN _bb1042
BUILTIN _bb1043 I4
list args _bb1043
END
get _bb1045 bb collection
get _bb1044 _bb1045 toback
call _bb1041 _bb1042 _bb1044
call _bb1038 _bb1039 _bb1041
IS A _bb1038
BEGIN _bb1046
BUILTIN _bb1047 "Assertion failed"
fail # _bb1047
END
BUILTIN _bb1049 Bfalse
BUILTIN _bb1051 I4
pop _bb1052 A
eq _bb1050 _bb1052 _bb1051
eq _bb1048 _bb1050 _bb1049
if # _bb1048 _bb1046
return # #
END
try _bbmacro20 _bb1033
BEGIN _bb1053
BEGIN _bb1055
str _bb1057 _bbmacro20
BUILTIN _bb1059 "\n"
BUILTIN _bb1060 "Collection"
add _bb1058 _bb1060 _bb1059
add _bb1056 _bb1058 _bb1057
list args _bb1056
END
get _bb1062 bb logger
get _bb1061 _bb1062 fail
call _bb1054 _bb1055 _bb1061
END
BEGIN _bb1063
BEGIN _bb1065
BUILTIN _bb1066 "Collection"
list args _bb1066
END
get _bb1068 bb logger
get _bb1067 _bb1068 ok
call _bb1064 _bb1065 _bb1067
END
catch # _bbmacro20 _bb1053 _bb1063
BEGIN _bb1071
BUILTIN A "I like banana!"
BEGIN _bb1073
BUILTIN _bb1074 "Assertion failed"
fail # _bb1074
END
BUILTIN _bb1076 Bfalse
BEGIN _bb1078
list args A
END
BEGIN _bb1081
BUILTIN _bb1082 "I like"
list args _bb1082
END
get _bb1084 bb string
get _bb1083 _bb1084 starts
call _bb1080 _bb1081 _bb1083
call _bb1077 _bb1078 _bb1080
eq _bb1075 _bb1077 _bb1076
if # _bb1075 _bb1073
BEGIN _bb1085
BUILTIN _bb1086 "Assertion failed"
fail # _bb1086
END
BUILTIN _bb1088 Bfalse
BEGIN _bb1090
list args A
END
BEGIN _bb1093
BUILTIN _bb1094 "banana!"
list args _bb1094
END
get _bb1096 bb string
get _bb1095 _bb1096 ends
call _bb1092 _bb1093 _bb1095
call _bb1089 _bb1090 _bb1092
eq _bb1087 _bb1089 _bb1088
if # _bb1087 _bb1085
BEGIN _bb1097
BUILTIN _bb1098 "Assertion failed"
fail # _bb1098
END
BUILTIN _bb1100 Bfalse
BUILTIN _bb1102 I3
BEGIN _bb1105
list args A
END
BEGIN _bb1108
BUILTIN _bb1109 " "
list args _bb1109
END
get _bb1111 bb string
get _bb1110 _bb1111 split
call _bb1107 _bb1108 _bb1110
call _bb1104 _bb1105 _bb1107
len _bb1103 _bb1104
eq _bb1101 _bb1103 _bb1102
eq _bb1099 _bb1101 _bb1100
if # _bb1099 _bb1097
BEGIN _bb1112
BUILTIN _bb1113 "Assertion failed"
fail # _bb1113
END
BUILTIN _bb1115 Bfalse
BUILTIN _bb1117 I2
BEGIN _bb1119
list args A
END
BEGIN _bb1122
BUILTIN _bb1123 "like"
list args _bb1123
END
get _bb1125 bb string
get _bb1124 _bb1125 index
call _bb1121 _bb1122 _bb1124
call _bb1118 _bb1119 _bb1121
eq _bb1116 _bb1118 _bb1117
eq _bb1114 _bb1116 _bb1115
if # _bb1114 _bb1112
BEGIN _bb1126
BUILTIN _bb1127 "Assertion failed"
fail # _bb1127
END
BUILTIN _bb1129 Bfalse
BUILTIN _bb1131 I10
BEGIN _bb1133
list args A
END
BEGIN _bb1136
BUILTIN _bb1137 "an"
list args _bb1137
BUILTIN pos I9
END
get _bb1140 bb string
get _bb1139 _bb1140 index
call _bb1135 _bb1136 _bb1139
call _bb1132 _bb1133 _bb1135
eq _bb1130 _bb1132 _bb1131
eq _bb1128 _bb1130 _bb1129
if # _bb1128 _bb1126
return # #
END
try _bbmacro21 _bb1071
BEGIN _bb1141
BEGIN _bb1143
str _bb1145 _bbmacro21
BUILTIN _bb1147 "\n"
BUILTIN _bb1148 "String"
add _bb1146 _bb1148 _bb1147
add _bb1144 _bb1146 _bb1145
list args _bb1144
END
get _bb1150 bb logger
get _bb1149 _bb1150 fail
call _bb1142 _bb1143 _bb1149
END
BEGIN _bb1151
BEGIN _bb1153
BUILTIN _bb1154 "String"
list args _bb1154
END
get _bb1156 bb logger
get _bb1155 _bb1156 ok
call _bb1152 _bb1153 _bb1155
END
catch # _bbmacro21 _bb1141 _bb1151
BEGIN _bb1159
BEGIN _bb1162
BUILTIN value I0
BEGIN _bb1164
next x args
get _bb1165 this value
add _bb1165 _bb1165 x
set # this value _bb1165
END
IS add _bb1164
return # this
END
new accum _bb1162
final # accum
BUILTIN _bb1167 I10
range _bb1166 _bb1167
iter _bbmacro23 _bb1166
BEGIN _bb1171
BEGIN _bb1172
next _bb1173 _bbmacro23
AS i _bb1173
exists _bb1174 i
END
BEGIN _bb1175
BEGIN _bb1177
list args i
END
get _bb1178 accum add
call _bb1176 _bb1177 _bb1178
END
while # _bb1172 _bb1175
END
try _bb1169 _bb1171
BEGIN _bb1179
BUILTIN _bb1180 "Assertion failed"
fail # _bb1180
END
BUILTIN _bb1182 Bfalse
BUILTIN _bb1184 I45
get _bb1185 accum value
eq _bb1183 _bb1185 _bb1184
eq _bb1181 _bb1183 _bb1182
if # _bb1181 _bb1179
return # #
END
try _bbmacro22 _bb1159
BEGIN _bb1186
BEGIN _bb1188
str _bb1190 _bbmacro22
BUILTIN _bb1192 "\n"
BUILTIN _bb1193 "Atomicity"
add _bb1191 _bb1193 _bb1192
add _bb1189 _bb1191 _bb1190
list args _bb1189
END
get _bb1195 bb logger
get _bb1194 _bb1195 fail
call _bb1187 _bb1188 _bb1194
END
BEGIN _bb1196
BEGIN _bb1198
BUILTIN _bb1199 "Atomicity"
list args _bb1199
END
get _bb1201 bb logger
get _bb1200 _bb1201 ok
call _bb1197 _bb1198 _bb1200
END
catch # _bbmacro22 _bb1186 _bb1196
BEGIN _bb1204
BEGIN _bb1207
BEGIN _bb1208
BEGIN _bb1210
list args B
END
call _bb1209 _bb1210 extern2
return # _bb1209
END
IS foo1 _bb1208
BEGIN _bb1211
BEGIN _bb1213
list args this
END
call _bb1212 _bb1213 extern3
return # _bb1212
END
IS foo2 _bb1211
BEGIN _bb1214
get _bb1216 B foo1
call _bb1215 # _bb1216
return # _bb1215
END
IS foo3 _bb1214
return # this
END
new A _bb1207
final # A
BEGIN _bb1219
BEGIN _bb1220
BEGIN _bb1222
list args A
END
call _bb1221 _bb1222 extern2
return # _bb1221
END
IS foo1 _bb1220
BEGIN _bb1223
BEGIN _bb1225
list args this
END
call _bb1224 _bb1225 extern3
return # _bb1224
END
IS foo2 _bb1223
BEGIN _bb1226
BUILTIN _bb1227 I1
return # _bb1227
END
IS foo3 _bb1226
return # this
END
new B _bb1219
final # B
BEGIN _bb1228
next obj args
get _bb1230 obj foo1
call _bb1229 # _bb1230
return # _bb1229
END
IS extern1 _bb1228
final # extern1
BEGIN _bb1231
next obj args
get _bb1233 obj foo2
call _bb1232 # _bb1233
return # _bb1232
END
IS extern2 _bb1231
final # extern2
BEGIN _bb1234
next obj args
get _bb1236 obj foo3
call _bb1235 # _bb1236
return # _bb1235
END
IS extern3 _bb1234
final # extern3
BEGIN _bb1237
BUILTIN _bb1238 "Assertion failed"
fail # _bb1238
END
BUILTIN _bb1240 Bfalse
BUILTIN _bb1242 I1
BEGIN _bb1244
list args A
END
call _bb1243 _bb1244 extern1
eq _bb1241 _bb1243 _bb1242
eq _bb1239 _bb1241 _bb1240
if # _bb1239 _bb1237
return # #
END
try _bbmacro24 _bb1204
BEGIN _bb1245
BEGIN _bb1247
str _bb1249 _bbmacro24
BUILTIN _bb1251 "\n"
BUILTIN _bb1252 "No deadlock"
add _bb1250 _bb1252 _bb1251
add _bb1248 _bb1250 _bb1249
list args _bb1248
END
get _bb1254 bb logger
get _bb1253 _bb1254 fail
call _bb1246 _bb1247 _bb1253
END
BEGIN _bb1255
BEGIN _bb1257
BUILTIN _bb1258 "No deadlock"
list args _bb1258
END
get _bb1260 bb logger
get _bb1259 _bb1260 ok
call _bb1256 _bb1257 _bb1259
END
catch # _bbmacro24 _bb1245 _bb1255
BEGIN _bb1263
BUILTIN _bb1265 "vfs://test.txt"
file f1 _bb1265
BUILTIN _bb1266 "Virtual data."
push # f1 _bb1266
BUILTIN _bb1268 "vfs://test.txt"
file f2 _bb1268
BEGIN _bb1269
BUILTIN _bb1270 "Assertion failed"
fail # _bb1270
END
BUILTIN _bb1272 Bfalse
BUILTIN _bb1274 "Virtual data."
BEGIN _bb1276
list args f2
END
get _bb1278 bb os
get _bb1277 _bb1278 read
call _bb1275 _bb1276 _bb1277
eq _bb1273 _bb1275 _bb1274
eq _bb1271 _bb1273 _bb1272
if # _bb1271 _bb1269
return # #
END
try _bbmacro25 _bb1263
BEGIN _bb1279
BEGIN _bb1281
str _bb1283 _bbmacro25
BUILTIN _bb1285 "\n"
BUILTIN _bb1286 "VFS"
add _bb1284 _bb1286 _bb1285
add _bb1282 _bb1284 _bb1283
list args _bb1282
END
get _bb1288 bb logger
get _bb1287 _bb1288 fail
call _bb1280 _bb1281 _bb1287
END
BEGIN _bb1289
BEGIN _bb1291
BUILTIN _bb1292 "VFS"
list args _bb1292
END
get _bb1294 bb logger
get _bb1293 _bb1294 ok
call _bb1290 _bb1291 _bb1293
END
catch # _bbmacro25 _bb1279 _bb1289
BEGIN _bb1297
BUILTIN _bb1298 "bb://.cache/database.db"
sqlite db _bb1298
BUILTIN _bb1301 "CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER);"
push _bb1300 db _bb1301
BUILTIN n I100000
time start
BUILTIN _bb1305 "BEGIN TRANSACTION;"
push _bb1304 db _bb1305
range _bb1306 n
iter _bbmacro27 _bb1306
BEGIN _bb1308
next _bb1309 _bbmacro27
AS i _bb1309
exists _bb1310 i
END
BEGIN _bb1311
BUILTIN _bb1314 ");"
BUILTIN _bb1318 I10
mod _bb1317 i _bb1318
BUILTIN _bb1319 I20
add _bb1316 _bb1319 _bb1317
str _bb1320 _bb1316
BUILTIN _bb1322 "', "
str _bb1324 i
BUILTIN _bb1325 "INSERT INTO users (name, age) VALUES ('User"
add _bb1323 _bb1325 _bb1324
add _bb1321 _bb1323 _bb1322
add _bb1315 _bb1321 _bb1320
add _bb1313 _bb1315 _bb1314
push _bb1312 db _bb1313
BUILTIN _bb1328 ";"
str _bb1330 i
BUILTIN _bb1331 "SELECT * FROM users WHERE id = "
add _bb1329 _bb1331 _bb1330
add _bb1327 _bb1329 _bb1328
push _bb1326 db _bb1327
BUILTIN _bb1334 ";"
str _bb1336 i
BUILTIN _bb1337 "UPDATE users SET age = age + 1 WHERE id = "
add _bb1335 _bb1337 _bb1336
add _bb1333 _bb1335 _bb1334
push _bb1332 db _bb1333
END
while # _bb1308 _bb1311
BUILTIN _bb1339 "COMMIT;"
push _bb1338 db _bb1339
time _bb1341
sub eta _bb1341 start
BEGIN _bb1342
BUILTIN _bb1343 "Assertion failed"
fail # _bb1343
END
BUILTIN _bb1345 Bfalse
BUILTIN _bb1347 F1.5
lt _bb1346 eta _bb1347
eq _bb1344 _bb1346 _bb1345
if # _bb1344 _bb1342
BEGIN _bb1348
BUILTIN _bb1349 "Assertion failed"
fail # _bb1349
END
BUILTIN _bb1351 Bfalse
BUILTIN _bb1355 "SELECT * FROM users;"
push _bb1354 db _bb1355
len _bb1353 _bb1354
eq _bb1352 n _bb1353
eq _bb1350 _bb1352 _bb1351
if # _bb1350 _bb1348
BUILTIN _bb1357 "DELETE FROM users;"
push _bb1356 db _bb1357
return # #
END
try _bbmacro26 _bb1297
BEGIN _bb1358
BEGIN _bb1360
str _bb1362 _bbmacro26
BUILTIN _bb1364 "\n"
BUILTIN _bb1365 "Database"
add _bb1363 _bb1365 _bb1364
add _bb1361 _bb1363 _bb1362
list args _bb1361
END
get _bb1367 bb logger
get _bb1366 _bb1367 fail
call _bb1359 _bb1360 _bb1366
END
BEGIN _bb1368
BEGIN _bb1370
BUILTIN _bb1371 "Database"
list args _bb1371
END
get _bb1373 bb logger
get _bb1372 _bb1373 ok
call _bb1369 _bb1370 _bb1372
END
catch # _bbmacro26 _bb1358 _bb1368
