%{returnx+y+x+y+x+y*2;} //main.bb line 1
BEGIN _bb169
next x args
float x x
next y args
float y y
%y*2 //main.bb line 1
BUILTIN _bb172 I2
mul _bb171 y _bb172
%x+y //main.bb line 1
add _bb176 x y
add _bb175 _bb176 x
add _bb174 _bb175 y
add _bb173 _bb174 x
add _bb170 _bb173 _bb171
%returnx+y+x+y+x+y*2 //main.bb line 1
return # _bb170
END
IS add _bb169
%time() //main.bb line 3
time tic
%ret=0 //main.bb line 4
BUILTIN ret I0
%range(1000000) //main.bb line 5
BUILTIN _bb180 I1000000
%range(1000000) //main.bb line 5
range _bb179 _bb180
%bbvm::iter(range(1000000)) //main.bb line 5
iter _bbmacro5 _bb179
%while(ias bbvm::next(_bbmacro5))ret+=add //main.bb line 5
BEGIN _bb182
%bbvm::next(_bbmacro5) //main.bb line 5
next _bb183 _bbmacro5
AS i _bb183
exists _bb184 i
END
BEGIN _bb185
%add(i,1) //main.bb line 6
BEGIN _bb187
%i,1 //main.bb line 6
BUILTIN _bb188 I1
%i,1 //main.bb line 6
list args i _bb188
END
%add(i,1) //main.bb line 6
call _bb186 _bb187 add
add ret ret _bb186
END
%while(ias bbvm::next(_bbmacro5))ret+=add //main.bb line 5
while # _bb182 _bb185
%time() //main.bb line 9
time _bb191
sub _bb190 _bb191 tic
%print(time()-tic) //main.bb line 9
print # _bb190
%print(ret) //main.bb line 10
print # ret
