BEGIN _bb6
BUILTIN name "loop"
BUILTIN author "Emmanouil Krasanakis"
BUILTIN license "Apache 2.0"
BUILTIN version "1.1"
BUILTIN release I0
BUILTIN year I2024
IS doc      \n     \n loop:tolist     \n -----------     \n Gathers all the values of an iterable and converts     \n them to a list. There are two variations to optionally     \n apply element-wise transforms to the lists with the      \n semi-typing notation.     \n Here is the pattern of gathering elements only:     \n      \n |   iterable = std::range(5);     \n |   A = loop::tolist(iterable);     \n |   print(A);     \n     \n Next is an example of how to apply a transformation.     \n This is consistent with typical transformation notation.     \n      \n |   iterable = std::range(5);     \n |   A = loop::tolist(iterable|str);     \n |   print(A);     \n      \n Finally, there is no need to explicitly use the      \n `loop::lambda` prefix to declare lambda for     \n element-wise transformations. So you can do something     \n like this:     \n      \n |   iterable = 1, 2, 3;     \n |   A = loop::tolist(iterable|x->x+1);     \n |   print(A);     \n    
END
AS loop::INFO _bb6
final # loop::INFO
exists _bb13 loop::INFO
BEGIN _bb14
BUILTIN name "symb"
BUILTIN author "Emmanouil Krasanakis"
BUILTIN license "Apache 2.0"
BUILTIN version "1.0"
BUILTIN release I0
BUILTIN year I2024
BUILTIN doc "     \n Introduces a mapping between various symbols and     \n coding notation. This may be used by various other     \n packages     \n     \n  Symbol    Replaced by     \n --------  --------------     \n  λ         symb::lambda         \n  π         symb::pi         "
END
AS symb::INFO _bb14
final # symb::INFO
exists _bb22 symb::INFO
BUILTIN _bb23 I15
BUILTIN _bb24 I1
BUILTIN _bb25 I2
list A _bb23 _bb24 _bb25
BEGIN _bb29
BEGIN _bb30
next x args
BEGIN _bb33
BEGIN _bb34
return # x
END
BUILTIN _bb36 I10
lt _bb35 x _bb36
if # _bb35 _bb34
END
try _bb31 _bb33
return # _bb31
END
IS _bbmacro0 _bb30
IS _bbmacro1 A
list _bbmacro2
iter _bbmacro5 _bbmacro1
next _bb39 _bbmacro5
AS _bbmacro3 _bb39
exists _bb40 _bbmacro3
BEGIN _bb41
BEGIN _bb42
push # _bbmacro2 _bbmacro4
END
BEGIN _bb44
list args _bbmacro3
END
call _bb43 _bb44 _bbmacro0
AS _bbmacro4 _bb43
exists _bb46 _bbmacro4
if # _bb46 _bb42
next _bb39 _bbmacro5
AS _bbmacro3 _bb39
exists _bb40 _bbmacro3
END
while # _bb40 _bb41
return # _bbmacro2
return # this
END
new A _bb29
print # A
